{"ibm-function-action": "<h1 id=\"ibm_function_action\">ibm_function_action</h1><p>Create, update, or delete an <a href=\"https://cloud.ibm.com/docs/openwhisk/openwhisk_actions.html#openwhisk_actions\">IBM Cloud Functions action</a>. Actions are stateless code snippets that run on the Cloud Functions platform. An action can be written as a JavaScript, Swift, or Python function, a Java method, or a custom executable program packaged in a Docker container. To bundle and share related actions, use the <code>function_package</code> resource.</p>", "example-usage": "<h2 id=\"example-usage\">Example usage</h2><p>The sample provides the usage of JavaScript, Node.js, Docker, action sequences, by using <code>ibm_function_action</code> resources.</p><h3 id=\"simple-javascript-action\">Simple JavaScript action</h3><p>The following example creates a JavaScript action. </p><p>terraform<br />resource \"ibm_function_action\" \"nodehello\" {<br />  name      = \"action-name\"<br />  namespace = \"function-namespace-name\"  </p><p>exec {<br />    kind = \"nodejs:10\"<br />    code = file(\"hellonode.js\")<br />  }<br />}</p><p></p><h3 id=\"passing-parameters-to-an-action\">Passing parameters to an action</h3><p>The following example shows how to pass parameters to an action. </p><p>terraform<br />resource \"ibm_function_action\" \"nodehellowithparameter\" {<br />  name      = \"hellonodeparam\"<br />  namespace = \"function-namespace-name\"</p><p>exec {<br />    kind = \"nodejs:10\"<br />    code = file(\"hellonodewithparameter.js\")<br />  }  user_defined_parameters = &lt;&lt;EOF<br />        [<br />    {<br />        \"key\":\"place\",<br />        \"value\":\"India\"<br />    }<br />        ]<br />EOF</p><p>}<br /></p><h3 id=\"packaging-an-action-as-a-nodejs-module\">Packaging an action as a Node.js module</h3><p>The following example packages a JavaScript action to a module. </p><p><code>resource \"ibm_function_action\" \"nodezip\" {  name      = \"nodezip\"  namespace = \"function-namespace-name\"  exec {    kind      = \"nodejs:10\"    code_path = \"nodeaction.zip\"  }}</code></p><h3 id=\"creating-action-sequences\">Creating action sequences</h3><p>The following example creates an action sequence. </p><p><code>resource \"ibm_function_action\" \"swifthello\" {  name      = \"actionsequence\"  namespace = \"function-namespace-name\"  exec {    kind       = \"sequence\"    components = [\"/whisk.system/utils/split\", \"/whisk.system/utils/sort\"]  }}</code></p><h3 id=\"creating-docker-actions\">Creating Docker actions</h3><p>The following example creates a Docker action. </p><p><code>resource \"ibm_function_action\" \"swifthello\" {  name      = \"dockeraction\"  namespace = \"function-namespace-name\"  exec {    kind   = \"blackbox\"     image  = \"janesmith/blackboxdemo\"    code   = file(\"helloSwift.swift\")  }}</code></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument reference</h2><p>Review the argument reference that you can specify for your resource. </p><ul><li><code>exec</code> - (Required, List) A nested block to describe executable binaries.</li></ul><p>Nested scheme for <code>exec</code>:<br />  - <code>code</code> - (Optional, String) The code to execute, when not using the <code>blackbox</code> executable.<br /><strong>Note</strong> Conflicts with <code>exec.components</code>, <code>exec.code_path</code>.<br />  - <code>code_path</code> - (Optional, String)  When not using the <code>blackbox</code> executable, the file path of code to execute and supports only <code>.zip</code> extension to create the action.<br /><strong>Note</strong> Conflicts with <code>exec.components</code>, <code>exec.code</code>.<br />  - <code>components</code> - (Optional, String) The list of fully qualified actions.<br /><strong>Note</strong> Conflicts with <code>exec.code</code>, <code>exec.image</code>, <code>exec.code.path</code>.<br />  - <code>image</code> - (Optional, String)  When using the <code>blackbox</code> executable, the name of the container image name.<br /><strong>Note</strong> Conflicts with <code>exec.components</code>.<br />  - <code>init</code> - (Optional, String)  When using <code>nodejs</code>, the optional archive reference.<br /><strong>Note</strong> Conflicts with <code>exec.components</code>, <code>exec.image</code>.<br />  - <code>kind</code> - (Required, String) The type of action. You can find supported kinds in the <a href=\"https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-runtimes\">IBM Cloud Functions Docs</a>.<br />  - <code>main</code> - (Optional, String) The name of the action entry point (function or fully-qualified method name, when applicable).<br /><strong>Note</strong> Conflicts with <code>exec.components</code>, <code>exec.image</code>.<br />- <code>limits</code> - (Optional, List) A nested block to describe assigned limits.</p><p>Nested scheme for <code>limits</code>:<br />  - <code>timeout</code> - (Optional, Integer) The timeout limit to terminate the action, specified in milliseconds. Default value is <code>60000</code>.<br />  - <code>memory</code> - (Optional, Integer) The maximum memory for the action, specified in megabyte. Default value is <code>256</code>.<br />  - <code>log_size</code> - (Optional, Integer) The maximum log size for the action, specified in megabyte. Default value is <code>10</code>.<br />- <code>name</code> - (Required, Forces new resource, String) The name of the action.<br />- <code>namespace</code> - (Required, String) The name of the function namespace.<br />- <code>publish</code> - (Optional, Bool) Action visibility.<br />- <code>user_defined_annotations</code> - (Optional, String) Annotations defined in key value format.<br />- <code>user_defined_parameters</code> - (Optional, String) Parameters defined in key value format. Parameter bindings included in the context passed to the action. Cloud Function backend/API.</p>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute reference</h2><p>In addition to all argument reference list, you can access the following attribute references after your resource is created.</p><ul><li><code>action_id</code> - (String) The action ID.</li><li><code>annotations</code> (List) All annotations to describe the action, including those set by you or by IBM Cloud Functions.</li><li><code>id</code> - (String) The ID of the new action.</li><li><code>namespace</code> - (String) The name of the function namespace.</li><li><code>parameters</code> - (List) All parameters passed to the action when the action is invoked, including those set by you or by the IBM Cloud Functions.</li><li><code>target_endpoint_url</code> - (String) The target endpoint URL of the action.</li><li><code>version</code> - (String) Semantic version of the item.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>The <code>ibm_function_action</code> resource can be imported by using the namespace and action ID.</p><p><strong>Syntax</strong></p><p><code>$ terraform import ibm_function_action.nodeAction &lt;namespace&gt;:&lt;action_id&gt;</code></p><p><strong>Example</strong></p><p><code>$ terraform import ibm_function_action.nodeAction Namespace-01:nodezip</code></p>", "description": "<h1 id=\"ibm_function_action\">ibm_function_action</h1><p>Create, update, or delete an <a href=\"https://cloud.ibm.com/docs/openwhisk/openwhisk_actions.html#openwhisk_actions\">IBM Cloud Functions action</a>. Actions are stateless code snippets that run on the Cloud Functions platform. An action can be written as a JavaScript, Swift, or Python function, a Java method, or a custom executable program packaged in a Docker container. To bundle and share related actions, use the <code>function_package</code> resource.</p>"}