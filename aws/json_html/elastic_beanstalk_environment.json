{"resource-aws-elastic-beanstalk-environment": "<h1 id=\"resource-aws_elastic_beanstalk_environment\">Resource: aws_elastic_beanstalk_environment</h1><p>Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows<br />you to deploy and manage applications in the AWS cloud without worrying about<br />the infrastructure that runs those applications.</p><p>Environments are often things such as <code>development</code>, <code>integration</code>, or<br /><code>production</code>.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_elastic_beanstalk_application\" \"tftest\" {<br />  name        = \"tf-test-name\"<br />  description = \"tf-test-desc\"<br />}</p><p>resource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {<br />  name                = \"tf-test-name\"<br />  application         = aws_elastic_beanstalk_application.tftest.name<br />  solution_stack_name = \"64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4\"<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>name</code> - (Required) A unique name for this Environment. This name is used<br />  in the application URL</li><li><code>application</code> \u2013 (Required) Name of the application that contains the version<br />  to be deployed</li><li><code>cname_prefix</code> - (Optional) Prefix to use for the fully qualified DNS name of<br />  the Environment.</li><li><code>description</code> - (Optional) Short description of the Environment</li><li><code>tier</code> - (Optional) Elastic Beanstalk Environment tier. Valid values are <code>Worker</code><br />  or <code>WebServer</code>. If tier is left blank <code>WebServer</code> will be used.</li><li><code>setting</code> \u2013 (Optional) Option settings to configure the new Environment. These<br />  override specific values that are set as defaults. The format is detailed<br />  below in <a href=\"#option-settings\">Option Settings</a></li><li><code>solution_stack_name</code> \u2013 (Optional) A solution stack to base your environment<br />off of. Example stacks can be found in the <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html\">Amazon API documentation</a></li><li><code>template_name</code> \u2013 (Optional) The name of the Elastic Beanstalk Configuration<br />  template to use in deployment</li><li><code>platform_arn</code> \u2013 (Optional) The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the Elastic Beanstalk <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn\">Platform</a><br />  to use in deployment</li><li><code>wait_for_ready_timeout</code> - (Default <code>20m</code>) The maximum<br /><a href=\"https://golang.org/pkg/time/#ParseDuration\">duration</a> that Terraform should<br />  wait for an Elastic Beanstalk Environment to be in a ready state before timing<br />  out.</li><li><code>poll_interval</code> \u2013 The time between polling the AWS API to<br />check if changes have been applied. Use this to adjust the rate of API calls<br />for any <code>create</code> or <code>update</code> action. Minimum <code>10s</code>, maximum <code>180s</code>. Omit this to<br />use the default behavior, which is an exponential backoff</li><li><code>version_label</code> - (Optional) The name of the Elastic Beanstalk Application Version<br />to use in deployment.</li><li><code>tags</code> - (Optional) A set of tags to apply to the Environment. If configured with a provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a> present, tags with matching keys will overwrite those defined at the provider-level.</li></ul>", "option-settings": "<h2 id=\"option-settings\">Option Settings</h2><p>Some options can be stack-specific, check <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html\">AWS Docs</a><br />for supported options and examples.</p><p>The <code>setting</code> and <code>all_settings</code> mappings support the following format:</p><ul><li><code>namespace</code> - unique namespace identifying the option's associated AWS resource</li><li><code>name</code> - name of the configuration option</li><li><code>value</code> - value for the configuration option</li><li><code>resource</code> - (Optional) resource name for <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction\">scheduled action</a></li></ul><h3 id=\"example-with-options\">Example With Options</h3><p>terraform<br />resource \"aws_elastic_beanstalk_application\" \"tftest\" {<br />  name        = \"tf-test-name\"<br />  description = \"tf-test-desc\"<br />}</p><p>resource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {<br />  name                = \"tf-test-name\"<br />  application         = aws_elastic_beanstalk_application.tftest.name<br />  solution_stack_name = \"64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4\"</p><p>setting {<br />    namespace = \"aws:ec2:vpc\"<br />    name      = \"VPCId\"<br />    value     = \"vpc-xxxxxxxx\"<br />  }</p><p>setting {<br />    namespace = \"aws:ec2:vpc\"<br />    name      = \"Subnets\"<br />    value     = \"subnet-xxxxxxxx\"<br />  }<br />}<br /></p>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - ID of the Elastic Beanstalk Environment.</li><li><code>name</code> - Name of the Elastic Beanstalk Environment.</li><li><code>description</code> - Description of the Elastic Beanstalk Environment.</li><li><code>tier</code> - The environment tier specified.</li><li><code>tags_all</code> - A map of tags assigned to the resource, including those inherited from the provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a>.</li><li><code>application</code> \u2013 The Elastic Beanstalk Application specified for this environment.</li><li><code>setting</code> \u2013 Settings specifically set for this Environment.</li><li><code>all_settings</code> \u2013 List of all option settings configured in this Environment. These<br />  are a combination of default settings and their overrides from <code>setting</code> in<br />  the configuration.</li><li><code>cname</code> - Fully qualified DNS name for this Environment.</li><li><code>autoscaling_groups</code> - The autoscaling groups used by this Environment.</li><li><code>instances</code> - Instances used by this Environment.</li><li><code>launch_configurations</code> - Launch configurations in use by this Environment.</li><li><code>load_balancers</code> - Elastic load balancers in use by this Environment.</li><li><code>queues</code> - SQS queues in use by this Environment.</li><li><code>triggers</code> - Autoscaling triggers in use by this Environment.</li><li><code>endpoint_url</code> - The URL to the Load Balancer for this Environment</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Elastic Beanstalk Environments using the <code>id</code>. For example:</p><p><code>terraformimport {  to = aws_elastic_beanstalk_environment.prodenv  id = \"e-rpqsewtp2j\"}</code></p><p>Using <code>terraform import</code>, import Elastic Beanstalk Environments using the <code>id</code>. For example:</p><p><code>console% terraform import aws_elastic_beanstalk_environment.prodenv e-rpqsewtp2j</code></p>", "description": "<h1 id=\"resource-aws_elastic_beanstalk_environment\">Resource: aws_elastic_beanstalk_environment</h1><p>Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows<br />you to deploy and manage applications in the AWS cloud without worrying about<br />the infrastructure that runs those applications.</p><p>Environments are often things such as <code>development</code>, <code>integration</code>, or<br /><code>production</code>.</p>"}