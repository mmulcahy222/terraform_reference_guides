{"resource-aws-vpc-peering-connection": "<h1 id=\"resource-aws_vpc_peering_connection\">Resource: aws_vpc_peering_connection</h1><p>Provides a resource to manage a VPC peering connection.</p><p>~&gt; <strong>NOTE on VPC Peering Connections and VPC Peering Connection Options:</strong> Terraform provides<br />both a standalone <a href=\"vpc_peering_connection_options.html\">VPC Peering Connection Options</a> and a VPC Peering Connection<br />resource with <code>accepter</code> and <code>requester</code> attributes. Do not manage options for the same VPC peering<br />connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.<br />Doing so will cause a conflict of options and will overwrite the options.<br />Using a VPC Peering Connection Options resource decouples management of the connection options from<br />management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.</p><p>-&gt; <strong>Note:</strong> For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region<br />VPC Peering Connections use the <code>aws_vpc_peering_connection</code> resource to manage the requester's side of the<br />connection and use the <code>aws_vpc_peering_connection_accepter</code> resource to manage the accepter's side of the connection.</p><p>-&gt; <strong>Note:</strong> Creating multiple <code>aws_vpc_peering_connection</code> resources with the same <code>peer_vpc_id</code> and <code>vpc_id</code> will not produce an error. Instead, AWS will return the connection <code>id</code> that already exists, resulting in multiple <code>aws_vpc_peering_connection</code> resources with the same <code>id</code>.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_vpc_peering_connection\" \"foo\" {<br />  peer_owner_id = var.peer_owner_id<br />  peer_vpc_id   = aws_vpc.bar.id<br />  vpc_id        = aws_vpc.foo.id<br />}</p><br /><p>Basic usage with connection options:</p><br /><p>terraform<br />resource \"aws_vpc_peering_connection\" \"foo\" {<br />  peer_owner_id = var.peer_owner_id<br />  peer_vpc_id   = aws_vpc.bar.id<br />  vpc_id        = aws_vpc.foo.id</p><br /><p>accepter {<br />    allow_remote_vpc_dns_resolution = true<br />  }</p><br /><p>requester {<br />    allow_remote_vpc_dns_resolution = true<br />  }<br />}</p><br /><p>Basic usage with tags:</p><br /><p>terraform<br />resource \"aws_vpc_peering_connection\" \"foo\" {<br />  peer_owner_id = var.peer_owner_id<br />  peer_vpc_id   = aws_vpc.bar.id<br />  vpc_id        = aws_vpc.foo.id<br />  auto_accept   = true</p><br /><p>tags = {<br />    Name = \"VPC Peering between foo and bar\"<br />  }<br />}</p><br /><p>resource \"aws_vpc\" \"foo\" {<br />  cidr_block = \"10.1.0.0/16\"<br />}</p><br /><p>resource \"aws_vpc\" \"bar\" {<br />  cidr_block = \"10.2.0.0/16\"<br />}</p><br /><p>Basic usage with region:</p><br /><p>terraform<br />resource \"aws_vpc_peering_connection\" \"foo\" {<br />  peer_owner_id = var.peer_owner_id<br />  peer_vpc_id   = aws_vpc.bar.id<br />  vpc_id        = aws_vpc.foo.id<br />  peer_region   = \"us-east-1\"<br />}</p><br /><p>resource \"aws_vpc\" \"foo\" {<br />  provider   = aws.us-west-2<br />  cidr_block = \"10.1.0.0/16\"<br />}</p><br /><p>resource \"aws_vpc\" \"bar\" {<br />  provider   = aws.us-east-1<br />  cidr_block = \"10.2.0.0/16\"<br />}</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>-&gt; <strong>Note:</strong> Modifying the VPC Peering Connection options requires peering to be active. An automatic activation<br />can be done using the <a href=\"vpc_peering_connection.html#auto_accept\"><code>auto_accept</code></a> attribute. Alternatively, the VPC Peering<br />Connection has to be made active manually using other means. See <a href=\"vpc_peering_connection.html#notes\">notes</a> below for<br />more information.</p><p>This argument supports the following arguments:</p><ul><li><code>peer_owner_id</code> - (Optional) The AWS account ID of the owner of the peer VPC.<br />   Defaults to the account ID the <a href=\"/docs/providers/aws/index.html\">AWS provider</a> is currently connected to.</li><li><code>peer_vpc_id</code> - (Required) The ID of the VPC with which you are creating the VPC Peering Connection.</li><li><code>vpc_id</code> - (Required) The ID of the requester VPC.</li><li><code>auto_accept</code> - (Optional) Accept the peering (both VPCs need to be in the same AWS account and region).</li><li><code>peer_region</code> - (Optional) The region of the accepter VPC of the VPC Peering Connection. <code>auto_accept</code> must be <code>false</code>,<br />and use the <code>aws_vpc_peering_connection_accepter</code> to manage the accepter side.</li><li><code>accepter</code> (Optional) - An optional configuration block that allows for <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">VPC Peering Connection</a> options to be set for the VPC that accepts<br />the peering connection (a maximum of one).</li><li><code>requester</code> (Optional) - A optional configuration block that allows for <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">VPC Peering Connection</a> options to be set for the VPC that requests<br />the peering connection (a maximum of one).</li><li><code>tags</code> - (Optional) A map of tags to assign to the resource. If configured with a provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a> present, tags with matching keys will overwrite those defined at the provider-level.</li></ul><h4 id=\"accepter-and-requester-arguments\">Accepter and Requester Arguments</h4><p>-&gt; <strong>Note:</strong> When enabled, the DNS resolution feature requires that VPCs participating in the peering<br />must have support for the DNS hostnames enabled. This can be done using the <a href=\"vpc.html#enable_dns_hostnames\"><code>enable_dns_hostnames</code></a> attribute in the <a href=\"vpc.html\"><code>aws_vpc</code></a> resource. See <a href=\"http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html\">Using DNS with Your VPC</a> user guide for more information.</p><ul><li><code>allow_remote_vpc_dns_resolution</code> - (Optional) Allow a local VPC to resolve public DNS hostnames to<br />private IP addresses when queried from instances in the peer VPC.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - The ID of the VPC Peering Connection.</li><li><code>accept_status</code> - The status of the VPC Peering Connection request.</li><li><code>tags_all</code> - A map of tags assigned to the resource, including those inherited from the provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a>.</li></ul>", "notes": "<h2 id=\"notes\">Notes</h2><p>If both VPCs are not in the same AWS account and region do not enable the <code>auto_accept</code> attribute.<br />The accepter can manage its side of the connection using the <code>aws_vpc_peering_connection_accepter</code> resource<br />or accept the connection manually using the AWS Management Console, AWS CLI, through SDKs, etc.</p>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts\">Configuration options</a>:</p><ul><li><code>create</code> - (Default <code>1m</code>)</li><li><code>update</code> - (Default <code>1m</code>)</li><li><code>delete</code> - (Default <code>1m</code>)</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import VPC Peering resources using the VPC peering <code>id</code>. For example:</p><p>terraform<br />import {<br />  to = aws_vpc_peering_connection.test_connection<br />  id = \"pcx-111aaa111\"<br />}</p><p>Using <code>terraform import</code>, import VPC Peering resources using the VPC peering <code>id</code>. For example:</p><p>console<br />% terraform import aws_vpc_peering_connection.test_connection pcx-111aaa111</p>", "description": "<h1 id=\"resource-aws_vpc_peering_connection\">Resource: aws_vpc_peering_connection</h1><p>Provides a resource to manage a VPC peering connection.</p><p>~&gt; <strong>NOTE on VPC Peering Connections and VPC Peering Connection Options:</strong> Terraform provides<br />both a standalone <a href=\"vpc_peering_connection_options.html\">VPC Peering Connection Options</a> and a VPC Peering Connection<br />resource with <code>accepter</code> and <code>requester</code> attributes. Do not manage options for the same VPC peering<br />connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.<br />Doing so will cause a conflict of options and will overwrite the options.<br />Using a VPC Peering Connection Options resource decouples management of the connection options from<br />management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.</p><p>-&gt; <strong>Note:</strong> For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region<br />VPC Peering Connections use the <code>aws_vpc_peering_connection</code> resource to manage the requester's side of the<br />connection and use the <code>aws_vpc_peering_connection_accepter</code> resource to manage the accepter's side of the connection.</p><p>-&gt; <strong>Note:</strong> Creating multiple <code>aws_vpc_peering_connection</code> resources with the same <code>peer_vpc_id</code> and <code>vpc_id</code> will not produce an error. Instead, AWS will return the connection <code>id</code> that already exists, resulting in multiple <code>aws_vpc_peering_connection</code> resources with the same <code>id</code>.</p>"}