{"resource-aws-msk-scram-secret-association": "<h1 id=\"resource-aws_msk_scram_secret_association\">Resource: aws_msk_scram_secret_association</h1><p>Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.</p><p>-&gt; <strong>Note:</strong> The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html\">Username/Password Authentication</a> section of the MSK Developer Guide for more details.</p><p>To set up username and password authentication for a cluster, create an <a href=\"/docs/providers/aws/r/secretsmanager_secret.html\"><code>aws_secretsmanager_secret</code> resource</a> and associate<br />a username and password with the secret with an <a href=\"/docs/providers/aws/r/secretsmanager_secret_version.html\"><code>aws_secretsmanager_secret_version</code> resource</a>. When creating a secret for the cluster,<br />the <code>name</code> must have the prefix <code>AmazonMSK_</code> and you must either use an existing custom AWS KMS key or create a new<br />custom AWS KMS key for your secret with the <a href=\"/docs/providers/aws/r/kms_key.html\"><code>aws_kms_key</code> resource</a>. It is important to note that a policy is required for the <code>aws_secretsmanager_secret</code><br />resource in order for Kafka to be able to read it. This policy is attached automatically when the <code>aws_msk_scram_secret_association</code> is used,<br />however, this policy will not be in terraform and as such, will present a diff on plan/apply. For that reason, you must use the <a href=\"/docs/providers/aws/r/secretsmanager_secret_policy.html\"><code>aws_secretsmanager_secret_policy</code><br />resource</a> as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_msk_scram_secret_association\" \"example\" {<br />  cluster_arn     = aws_msk_cluster.example.arn<br />  secret_arn_list = [aws_secretsmanager_secret.example.arn]</p><br /><p>depends_on = [aws_secretsmanager_secret_version.example]<br />}</p><br /><p>resource \"aws_msk_cluster\" \"example\" {<br />  cluster_name = \"example\"<br />  # ... other configuration...<br />  client_authentication {<br />    sasl {<br />      scram = true<br />    }<br />  }<br />}</p><br /><p>resource \"aws_secretsmanager_secret\" \"example\" {<br />  name       = \"AmazonMSK_example\"<br />  kms_key_id = aws_kms_key.example.key_id<br />}</p><br /><p>resource \"aws_kms_key\" \"example\" {<br />  description = \"Example Key for MSK Cluster Scram Secret Association\"<br />}</p><br /><p>resource \"aws_secretsmanager_secret_version\" \"example\" {<br />  secret_id     = aws_secretsmanager_secret.example.id<br />  secret_string = jsonencode({ username = \"user\", password = \"pass\" })<br />}</p><br /><p>data \"aws_iam_policy_document\" \"example\" {<br />  statement {<br />    sid    = \"AWSKafkaResourcePolicy\"<br />    effect = \"Allow\"</p><br /><pre><code>principals {<br />  type        = \"Service\"<br />  identifiers = [\"kafka.amazonaws.com\"]<br />}<br /><br />actions   = [\"secretsmanager:getSecretValue\"]<br />resources = [aws_secretsmanager_secret.example.arn]<br /></code></pre><br /><p>}<br />}</p><br /><p>resource \"aws_secretsmanager_secret_policy\" \"example\" {<br />  secret_arn = aws_secretsmanager_secret.example.arn<br />  policy     = data.aws_iam_policy_document.example.json<br />}</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>cluster_arn</code> - (Required, Forces new resource) Amazon Resource Name (ARN) of the MSK cluster.</li><li><code>secret_arn_list</code> - (Required) List of AWS Secrets Manager secret ARNs.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - Amazon Resource Name (ARN) of the MSK cluster.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import MSK SCRAM Secret Associations using the <code>id</code>. For example:</p><p>terraform<br />import {<br />  to = aws_msk_scram_secret_association.example<br />  id = \"arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3\"<br />}</p><p>Using <code>terraform import</code>, import MSK SCRAM Secret Associations using the <code>id</code>. For example:</p><p>console<br />% terraform import aws_msk_scram_secret_association.example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3</p>", "description": "<h1 id=\"resource-aws_msk_scram_secret_association\">Resource: aws_msk_scram_secret_association</h1><p>Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.</p><p>-&gt; <strong>Note:</strong> The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html\">Username/Password Authentication</a> section of the MSK Developer Guide for more details.</p><p>To set up username and password authentication for a cluster, create an <a href=\"/docs/providers/aws/r/secretsmanager_secret.html\"><code>aws_secretsmanager_secret</code> resource</a> and associate<br />a username and password with the secret with an <a href=\"/docs/providers/aws/r/secretsmanager_secret_version.html\"><code>aws_secretsmanager_secret_version</code> resource</a>. When creating a secret for the cluster,<br />the <code>name</code> must have the prefix <code>AmazonMSK_</code> and you must either use an existing custom AWS KMS key or create a new<br />custom AWS KMS key for your secret with the <a href=\"/docs/providers/aws/r/kms_key.html\"><code>aws_kms_key</code> resource</a>. It is important to note that a policy is required for the <code>aws_secretsmanager_secret</code><br />resource in order for Kafka to be able to read it. This policy is attached automatically when the <code>aws_msk_scram_secret_association</code> is used,<br />however, this policy will not be in terraform and as such, will present a diff on plan/apply. For that reason, you must use the <a href=\"/docs/providers/aws/r/secretsmanager_secret_policy.html\"><code>aws_secretsmanager_secret_policy</code><br />resource</a> as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.</p>"}