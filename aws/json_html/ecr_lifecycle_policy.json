{"resource-aws-ecr-lifecycle-policy": "<h1 id=\"resource-aws_ecr_lifecycle_policy\">Resource: aws_ecr_lifecycle_policy</h1><p>Manages an ECR repository lifecycle policy.</p><p>~&gt; <strong>NOTE:</strong> Only one <code>aws_ecr_lifecycle_policy</code> resource can be used with the same ECR repository. To apply multiple rules, they must be combined in the <code>policy</code> JSON.</p><p>~&gt; <strong>NOTE:</strong> The AWS ECR API seems to reorder rules based on <code>rulePriority</code>. If you define multiple rules that are not sorted in ascending <code>rulePriority</code> order in the Terraform code, the resource will be flagged for recreation every <code>terraform plan</code>.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"policy-on-untagged-image\">Policy on untagged image</h3><p>terraform<br />resource \"aws_ecr_repository\" \"foo\" {<br />  name = \"bar\"<br />}</p><p>resource \"aws_ecr_lifecycle_policy\" \"foopolicy\" {<br />  repository = aws_ecr_repository.foo.name</p><p>policy = &lt;&lt;EOF<br />{<br />    \"rules\": [<br />        {<br />            \"rulePriority\": 1,<br />            \"description\": \"Expire images older than 14 days\",<br />            \"selection\": {<br />                \"tagStatus\": \"untagged\",<br />                \"countType\": \"sinceImagePushed\",<br />                \"countUnit\": \"days\",<br />                \"countNumber\": 14<br />            },<br />            \"action\": {<br />                \"type\": \"expire\"<br />            }<br />        }<br />    ]<br />}<br />EOF<br />}<br /></p><h3 id=\"policy-on-tagged-image\">Policy on tagged image</h3><p>terraform<br />resource \"aws_ecr_repository\" \"foo\" {<br />  name = \"bar\"<br />}</p><p>resource \"aws_ecr_lifecycle_policy\" \"foopolicy\" {<br />  repository = aws_ecr_repository.foo.name</p><p>policy = &lt;&lt;EOF<br />{<br />    \"rules\": [<br />        {<br />            \"rulePriority\": 1,<br />            \"description\": \"Keep last 30 images\",<br />            \"selection\": {<br />                \"tagStatus\": \"tagged\",<br />                \"tagPrefixList\": [\"v\"],<br />                \"countType\": \"imageCountMoreThan\",<br />                \"countNumber\": 30<br />            },<br />            \"action\": {<br />                \"type\": \"expire\"<br />            }<br />        }<br />    ]<br />}<br />EOF<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>repository</code> - (Required) Name of the repository to apply the policy.</li><li><code>policy</code> - (Required) The policy document. This is a JSON formatted string. See more details about <a href=\"http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters\">Policy Parameters</a> in the official AWS docs.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>repository</code> - The name of the repository.</li><li><code>registry_id</code> - The registry ID where the repository was created.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import ECR Lifecycle Policy using the name of the repository. For example:</p><p><code>terraformimport {  to = aws_ecr_lifecycle_policy.example  id = \"tf-example\"}</code></p><p>Using <code>terraform import</code>, import ECR Lifecycle Policy using the name of the repository. For example:</p><p><code>console% terraform import aws_ecr_lifecycle_policy.example tf-example</code></p>", "description": "<h1 id=\"resource-aws_ecr_lifecycle_policy\">Resource: aws_ecr_lifecycle_policy</h1><p>Manages an ECR repository lifecycle policy.</p><p>~&gt; <strong>NOTE:</strong> Only one <code>aws_ecr_lifecycle_policy</code> resource can be used with the same ECR repository. To apply multiple rules, they must be combined in the <code>policy</code> JSON.</p><p>~&gt; <strong>NOTE:</strong> The AWS ECR API seems to reorder rules based on <code>rulePriority</code>. If you define multiple rules that are not sorted in ascending <code>rulePriority</code> order in the Terraform code, the resource will be flagged for recreation every <code>terraform plan</code>.</p>"}