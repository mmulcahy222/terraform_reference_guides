{"resource-aws-lambda-permission": "<h1 id=\"resource-aws_lambda_permission\">Resource: aws_lambda_permission</h1><p>Gives an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"basic-usage\">Basic Usage</h3><p>terraform<br />resource \"aws_lambda_permission\" \"allow_cloudwatch\" {<br />  statement_id  = \"AllowExecutionFromCloudWatch\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.test_lambda.function_name<br />  principal     = \"events.amazonaws.com\"<br />  source_arn    = \"arn:aws:events:eu-west-1:111122223333:rule/RunDaily\"<br />  qualifier     = aws_lambda_alias.test_alias.name<br />}</p><p>resource \"aws_lambda_alias\" \"test_alias\" {<br />  name             = \"testalias\"<br />  description      = \"a sample description\"<br />  function_name    = aws_lambda_function.test_lambda.function_name<br />  function_version = \"$LATEST\"<br />}</p><p>resource \"aws_lambda_function\" \"test_lambda\" {<br />  filename      = \"lambdatest.zip\"<br />  function_name = \"lambda_function_name\"<br />  role          = aws_iam_role.iam_for_lambda.arn<br />  handler       = \"exports.handler\"<br />  runtime       = \"nodejs16.x\"<br />}</p><p>resource \"aws_iam_role\" \"iam_for_lambda\" {<br />  name = \"iam_for_lambda\"</p><p># Terraform's \"jsonencode\" function converts a<br />  # Terraform expression result to valid JSON syntax.<br />  assume_role_policy = jsonencode({<br />    Version = \"2012-10-17\"<br />    Statement = [<br />      {<br />        Action = \"sts:AssumeRole\"<br />        Effect = \"Allow\"<br />        Sid    = \"\"<br />        Principal = {<br />          Service = \"lambda.amazonaws.com\"<br />        }<br />      },<br />    ]<br />  })<br />}<br /></p><h3 id=\"with-sns\">With SNS</h3><p>terraform<br />resource \"aws_lambda_permission\" \"with_sns\" {<br />  statement_id  = \"AllowExecutionFromSNS\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.func.function_name<br />  principal     = \"sns.amazonaws.com\"<br />  source_arn    = aws_sns_topic.default.arn<br />}</p><p>resource \"aws_sns_topic\" \"default\" {<br />  name = \"call-lambda-maybe\"<br />}</p><p>resource \"aws_sns_topic_subscription\" \"lambda\" {<br />  topic_arn = aws_sns_topic.default.arn<br />  protocol  = \"lambda\"<br />  endpoint  = aws_lambda_function.func.arn<br />}</p><p>resource \"aws_lambda_function\" \"func\" {<br />  filename      = \"lambdatest.zip\"<br />  function_name = \"lambda_called_from_sns\"<br />  role          = aws_iam_role.default.arn<br />  handler       = \"exports.handler\"<br />  runtime       = \"python3.7\"<br />}</p><p>resource \"aws_iam_role\" \"default\" {<br />  name = \"iam_for_lambda_with_sns\"</p><p># Terraform's \"jsonencode\" function converts a<br />  # Terraform expression result to valid JSON syntax.<br />  assume_role_policy = jsonencode({<br />    Version = \"2012-10-17\"<br />    Statement = [<br />      {<br />        Action = \"sts:AssumeRole\"<br />        Effect = \"Allow\"<br />        Sid    = \"\"<br />        Principal = {<br />          Service = \"lambda.amazonaws.com\"<br />        }<br />      },<br />    ]<br />  })<br />}<br /></p><h3 id=\"with-api-gateway-rest-api\">With API Gateway REST API</h3><p>terraform<br />resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {<br />  name        = \"MyDemoAPI\"<br />  description = \"This is my API for demonstration purposes\"<br />}</p><p>resource \"aws_lambda_permission\" \"lambda_permission\" {<br />  statement_id  = \"AllowMyDemoAPIInvoke\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = \"MyDemoFunction\"<br />  principal     = \"apigateway.amazonaws.com\"</p><p># The /<em> part allows invocation from any stage, method and resource path<br />  # within API Gateway.<br />  source_arn = \"${aws_api_gateway_rest_api.MyDemoAPI.execution_arn}/</em>\"<br />}<br /></p><h3 id=\"with-cloudwatch-log-group\">With CloudWatch Log Group</h3><p>terraform<br />resource \"aws_lambda_permission\" \"logging\" {<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.logging.function_name<br />  principal     = \"logs.eu-west-1.amazonaws.com\"<br />  source_arn    = \"${aws_cloudwatch_log_group.default.arn}:*\"<br />}</p><p>resource \"aws_cloudwatch_log_group\" \"default\" {<br />  name = \"/default\"<br />}</p><p>resource \"aws_cloudwatch_log_subscription_filter\" \"logging\" {<br />  depends_on      = [aws_lambda_permission.logging]<br />  destination_arn = aws_lambda_function.logging.arn<br />  filter_pattern  = \"\"<br />  log_group_name  = aws_cloudwatch_log_group.default.name<br />  name            = \"logging_default\"<br />}</p><p>resource \"aws_lambda_function\" \"logging\" {<br />  filename      = \"lamba_logging.zip\"<br />  function_name = \"lambda_called_from_cloudwatch_logs\"<br />  handler       = \"exports.handler\"<br />  role          = aws_iam_role.default.arn<br />  runtime       = \"python3.7\"<br />}</p><p>data \"aws_iam_policy_document\" \"assume_role\" {<br />  statement {<br />    effect = \"Allow\"</p><pre><code>principals {  type        = \"Service\"  identifiers = [\"lambda.amazonaws.com\"]}actions = [\"sts:AssumeRole\"]</code></pre><p>}<br />}</p><p>resource \"aws_iam_role\" \"default\" {<br />  name               = \"iam_for_lambda_called_from_cloudwatch_logs\"<br />  assume_role_policy = data.aws_iam_policy_document.assume_role.json<br />}<br /></p><h3 id=\"with-cross-account-invocation-policy\">With Cross-Account Invocation Policy</h3><p>terraform<br />resource \"aws_lambda_function_url\" \"url\" {<br />  function_name      = aws_lambda_function.example.function_name<br />  authorization_type = \"AWS_IAM\"<br />}</p><p>resource \"aws_lambda_permission\" \"url\" {<br />  action        = \"lambda:InvokeFunctionUrl\"<br />  function_name = aws_lambda_function.example.function_name<br />  principal     = \"arn:aws:iam::444455556666:role/example\"</p><p>source_account         = \"444455556666\"<br />  function_url_auth_type = \"AWS_IAM\"</p><p># Adds the following condition keys<br />  # \"Condition\": {<br />  #      \"StringEquals\": {<br />  #        \"AWS:SourceAccount\": \"444455556666\",<br />  #        \"lambda:FunctionUrlAuthType\": \"AWS_IAM\"<br />  #      }<br />  #    }</p><p>}<br /></p><h3 id=\"with-replace_triggered_by-lifecycle-configuration\">With <code>replace_triggered_by</code> Lifecycle Configuration</h3><p>If omitting the <code>qualifier</code> argument (which forces re-creation each time a function version is published), a <code>lifecycle</code> block can be used to ensure permissions are re-applied on any change to the underlying function.</p><p>terraform<br />resource \"aws_lambda_permission\" \"logging\" {<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.example.function_name<br />  principal     = \"events.amazonaws.com\"<br />  source_arn    = \"arn:aws:events:eu-west-1:111122223333:rule/RunDaily\"</p><p>lifecycle {<br />    replace_triggered_by = [<br />      aws_lambda_function.example<br />    ]<br />  }<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><ul><li><code>action</code> - (Required) The AWS Lambda action you want to allow in this statement. (e.g., <code>lambda:InvokeFunction</code>)</li><li><code>event_source_token</code> - (Optional) The Event Source Token to validate.  Used with <a href=\"https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli\">Alexa Skills</a>.</li><li><code>function_name</code> - (Required) Name of the Lambda function whose resource policy you are updating</li><li><code>function_url_auth_type</code> - (Optional) Lambda Function URLs <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html\">authentication type</a>. Valid values are: <code>AWS_IAM</code> or <code>NONE</code>. Only supported for <code>lambda:InvokeFunctionUrl</code> action.</li><li><code>principal</code> - (Required) The principal who is getting this permission e.g., <code>s3.amazonaws.com</code>, an AWS account ID, or AWS IAM principal, or AWS service principal such as <code>events.amazonaws.com</code> or <code>sns.amazonaws.com</code>.</li><li><code>qualifier</code> - (Optional) Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., <code>arn:aws:lambda:aws-region:acct-id:function:function-name:2</code></li><li><code>source_account</code> - (Optional) This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.</li><li><code>source_arn</code> - (Optional) When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.<br />  Without this, any resource from <code>principal</code> will be granted permission \u2013 even if that resource is from another account.<br />  For S3, this should be the ARN of the S3 Bucket.<br />  For EventBridge events, this should be the ARN of the EventBridge Rule.<br />  For API Gateway, this should be the ARN of the API, as described <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html\">here</a>.</li><li><code>statement_id</code> - (Optional) A unique statement identifier. By default generated by Terraform.</li><li><code>statement_id_prefix</code> - (Optional) A statement identifier prefix. Terraform will generate a unique suffix. Conflicts with <code>statement_id</code>.</li><li><code>principal_org_id</code> - (Optional) The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports no additional attributes.</p>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Lambda permission statements using function_name/statement_id with an optional qualifier. For example:</p><p><code>terraformimport {  to = aws_lambda_permission.test_lambda_permission  id = \"my_test_lambda_function/AllowExecutionFromCloudWatch\"}</code></p><p><code>terraformimport {  to = aws_lambda_permission.test_lambda_permission  id = \"my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch\"}</code></p><p>Using <code>terraform import</code>, import Lambda permission statements using function_name/statement_id with an optional qualifier. For example:</p><p><code>console% terraform import aws_lambda_permission.test_lambda_permission my_test_lambda_function/AllowExecutionFromCloudWatch</code></p><p><code>console% terraform import aws_lambda_permission.test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch</code></p>", "description": "<h1 id=\"resource-aws_lambda_permission\">Resource: aws_lambda_permission</h1><p>Gives an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function.</p>"}