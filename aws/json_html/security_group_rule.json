{"resource-aws-security-group-rule": "<h1 id=\"resource-aws_security_group_rule\">Resource: aws_security_group_rule</h1><p>Provides a security group rule resource. Represents a single <code>ingress</code> or<br /><code>egress</code> group rule, which can be added to external Security Groups.</p><p>~&gt; <strong>NOTE on Security Groups and Security Group Rules:</strong> Terraform currently provides a <a href=\"security_group.html\">Security Group resource</a> with <code>ingress</code> and <code>egress</code> rules defined in-line and a Security Group Rule resource which manages one or more <code>ingress</code> or<br /><code>egress</code> rules. Both of these resource were added before AWS assigned a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html\">security group rule unique ID</a>, and they do not work well in all scenarios using the<code>description</code> and <code>tags</code> attributes, which rely on the unique ID.<br />The <a href=\"vpc_security_group_egress_rule.html\"><code>aws_vpc_security_group_egress_rule</code></a> and <a href=\"vpc_security_group_ingress_rule.html\"><code>aws_vpc_security_group_ingress_rule</code></a> resources have been added to address these limitations and should be used for all new security group rules.<br />You should not use the <code>aws_vpc_security_group_egress_rule</code> and <code>aws_vpc_security_group_ingress_rule</code> resources in conjunction with an <code>aws_security_group</code> resource with in-line rules or with <code>aws_security_group_rule</code> resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.</p><p>~&gt; <strong>NOTE:</strong> Setting <code>protocol = \"all\"</code> or <code>protocol = -1</code> with <code>from_port</code> and <code>to_port</code> will result in the EC2 API creating a security group rule with all ports open. This API behavior cannot be controlled by Terraform and may generate warnings in the future.</p><p>~&gt; <strong>NOTE:</strong> Referencing Security Groups across VPC peering has certain restrictions. More information is available in the <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html\">VPC Peering User Guide</a>.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>Basic usage</p><p><code>terraformresource \"aws_security_group_rule\" \"example\" {  type              = \"ingress\"  from_port         = 0  to_port           = 65535  protocol          = \"tcp\"  cidr_blocks       = [aws_vpc.example.cidr_block]  ipv6_cidr_blocks  = [aws_vpc.example.ipv6_cidr_block]  security_group_id = \"sg-123456\"}</code></p><h3 id=\"usage-with-prefix-list-ids\">Usage With Prefix List IDs</h3><p>Prefix Lists are either managed by AWS internally, or created by the customer using a<br /><a href=\"ec2_managed_prefix_list.html\">Managed Prefix List resource</a>. Prefix Lists provided by<br />AWS are associated with a prefix list name, or service name, that is linked to a specific region.</p><p>Prefix list IDs are exported on VPC Endpoints, so you can use this format:</p><p>terraform<br />resource \"aws_security_group_rule\" \"allow_all\" {<br />  type              = \"egress\"<br />  to_port           = 0<br />  protocol          = \"-1\"<br />  prefix_list_ids   = [aws_vpc_endpoint.my_endpoint.prefix_list_id]<br />  from_port         = 0<br />  security_group_id = \"sg-123456\"<br />}</p>", "": "<h1 id=\"_1\">...</h1><p>resource \"aws_vpc_endpoint\" \"my_endpoint\" {<br />  # ...<br />}<br /></p><p>You can also find a specific Prefix List using the <a href=\"/docs/providers/aws/d/prefix_list.html\"><code>aws_prefix_list</code></a><br />or <a href=\"/docs/providers/aws/d/ec2_managed_prefix_list.html\"><code>ec2_managed_prefix_list</code></a> data sources:</p><p>terraform<br />data \"aws_region\" \"current\" {}</p><p>data \"aws_prefix_list\" \"s3\" {<br />  name = \"com.amazonaws.${data.aws_region.current.name}.s3\"<br />}</p><p>resource \"aws_security_group_rule\" \"s3_gateway_egress\" {<br />  # S3 Gateway interfaces are implemented at the routing level which means we<br />  # can avoid the metered billing of a VPC endpoint interface by allowing<br />  # outbound traffic to the public IP ranges, which will be routed through<br />  # the Gateway interface:<br />  # https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html<br />  description       = \"S3 Gateway Egress\"<br />  type              = \"egress\"<br />  security_group_id = \"sg-123456\"<br />  from_port         = 443<br />  to_port           = 443<br />  protocol          = \"tcp\"<br />  prefix_list_ids   = [data.aws_prefix_list.s3.id]<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>The following arguments are required:</p><ul><li><code>from_port</code> - (Required) Start port (or ICMP type number if protocol is \"icmp\" or \"icmpv6\").</li><li><code>protocol</code> - (Required) Protocol. If not icmp, icmpv6, tcp, udp, or all use the <a href=\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">protocol number</a></li><li><code>security_group_id</code> - (Required) Security group to apply this rule to.</li><li><code>to_port</code> - (Required) End port (or ICMP code if protocol is \"icmp\").</li><li><code>type</code> - (Required) Type of rule being created. Valid options are <code>ingress</code> (inbound)<br />or <code>egress</code> (outbound).</li></ul><p>The following arguments are optional:</p><p>~&gt; <strong>Note</strong> Although <code>cidr_blocks</code>, <code>ipv6_cidr_blocks</code>, <code>prefix_list_ids</code>, and <code>source_security_group_id</code> are all marked as optional, you <em>must</em> provide one of them in order to configure the source of the traffic.</p><ul><li><code>cidr_blocks</code> - (Optional) List of CIDR blocks. Cannot be specified with <code>source_security_group_id</code> or <code>self</code>.</li><li><code>description</code> - (Optional) Description of the rule.</li><li><code>ipv6_cidr_blocks</code> - (Optional) List of IPv6 CIDR blocks. Cannot be specified with <code>source_security_group_id</code> or <code>self</code>.</li><li><code>prefix_list_ids</code> - (Optional) List of Prefix List IDs.</li><li><code>self</code> - (Optional) Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with <code>cidr_blocks</code>, <code>ipv6_cidr_blocks</code>, or <code>source_security_group_id</code>.</li><li><code>source_security_group_id</code> - (Optional) Security group id to allow access to/from, depending on the <code>type</code>. Cannot be specified with <code>cidr_blocks</code>, <code>ipv6_cidr_blocks</code>, or <code>self</code>.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - ID of the security group rule.</li><li><code>security_group_rule_id</code> - If the <code>aws_security_group_rule</code> resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.</li></ul>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts\">Configuration options</a>:</p><ul><li><code>create</code> - (Default <code>5m</code>)</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Security Group Rules using the <code>security_group_id</code>, <code>type</code>, <code>protocol</code>, <code>from_port</code>, <code>to_port</code>, and source(s)/destination(s) (such as a <code>cidr_block</code>) separated by underscores (<code>_</code>). All parts are required. For example:</p><p><strong>NOTE:</strong> Not all rule permissions (e.g., not all of a rule's CIDR blocks) need to be imported for Terraform to manage rule permissions. However, importing some of a rule's permissions but not others, and then making changes to the rule will result in the creation of an additional rule to capture the updated permissions. Rule permissions that were not imported are left intact in the original rule.</p><p>Import an ingress rule in security group <code>sg-6e616f6d69</code> for TCP port 8000 with an IPv4 destination CIDR of <code>10.0.3.0/24</code>:</p><p><code>terraformimport {  to = aws_security_group_rule.ingress  id = \"sg-6e616f6d69_ingress_tcp_8000_8000_10.0.3.0/24\"}</code></p><p>Import a rule with various IPv4 and IPv6 source CIDR blocks:</p><p><code>terraformimport {  to = aws_security_group_rule.ingress  id = \"sg-4973616163_ingress_tcp_100_121_10.1.0.0/16_2001:db8::/48_10.2.0.0/16_2002:db8::/48\"}</code></p><p>Import a rule, applicable to all ports, with a protocol other than TCP/UDP/ICMP/ICMPV6/ALL, e.g., Multicast Transport Protocol (MTP), using the IANA protocol number. For example: 92.</p><p><code>terraformimport {  to = aws_security_group_rule.ingress  id = \"sg-6777656e646f6c796e_ingress_92_0_65536_10.0.3.0/24_10.0.4.0/24\"}</code></p><p>Import a default any/any egress rule to 0.0.0.0/0:</p><p><code>terraformimport {  to = aws_security_group_rule.default_egress  id = \"sg-6777656e646f6c796e_egress_all_0_0_0.0.0.0/0\"}</code></p><p>Import an egress rule with a prefix list ID destination:</p><p><code>terraformimport {  to = aws_security_group_rule.egress  id = \"sg-62726f6479_egress_tcp_8000_8000_pl-6469726b\"}</code></p><p>Import a rule applicable to all protocols and ports with a security group source:</p><p><code>terraformimport {  to = aws_security_group_rule.ingress_rule  id = \"sg-7472697374616e_ingress_all_0_65536_sg-6176657279\"}</code></p><p>Import a rule that has itself and an IPv6 CIDR block as sources:</p><p><code>terraformimport {  to = aws_security_group_rule.rule_name  id = \"sg-656c65616e6f72_ingress_tcp_80_80_self_2001:db8::/48\"}</code></p><p><strong>Using <code>terraform import</code> to import</strong> Security Group Rules using the <code>security_group_id</code>, <code>type</code>, <code>protocol</code>, <code>from_port</code>, <code>to_port</code>, and source(s)/destination(s) (such as a <code>cidr_block</code>) separated by underscores (<code>_</code>). All parts are required. For example:</p><p><strong>NOTE:</strong> Not all rule permissions (e.g., not all of a rule's CIDR blocks) need to be imported for Terraform to manage rule permissions. However, importing some of a rule's permissions but not others, and then making changes to the rule will result in the creation of an additional rule to capture the updated permissions. Rule permissions that were not imported are left intact in the original rule.</p><p>Import an ingress rule in security group <code>sg-6e616f6d69</code> for TCP port 8000 with an IPv4 destination CIDR of <code>10.0.3.0/24</code>:</p><p><code>console% terraform import aws_security_group_rule.ingress sg-6e616f6d69_ingress_tcp_8000_8000_10.0.3.0/24</code></p><p>Import a rule with various IPv4 and IPv6 source CIDR blocks:</p><p><code>console% terraform import aws_security_group_rule.ingress sg-4973616163_ingress_tcp_100_121_10.1.0.0/16_2001:db8::/48_10.2.0.0/16_2002:db8::/48</code></p><p>Import a rule, applicable to all ports, with a protocol other than TCP/UDP/ICMP/ICMPV6/ALL, e.g., Multicast Transport Protocol (MTP), using the IANA protocol number. For example: 92.</p><p><code>console% terraform import aws_security_group_rule.ingress sg-6777656e646f6c796e_ingress_92_0_65536_10.0.3.0/24_10.0.4.0/24</code></p><p>Import a default any/any egress rule to 0.0.0.0/0:</p><p><code>console% terraform import aws_security_group_rule.default_egress sg-6777656e646f6c796e_egress_all_0_0_0.0.0.0/0</code></p><p>Import an egress rule with a prefix list ID destination:</p><p><code>console% terraform import aws_security_group_rule.egress sg-62726f6479_egress_tcp_8000_8000_pl-6469726b</code></p><p>Import a rule applicable to all protocols and ports with a security group source:</p><p><code>console% terraform import aws_security_group_rule.ingress_rule sg-7472697374616e_ingress_all_0_65536_sg-6176657279</code></p><p>Import a rule that has itself and an IPv6 CIDR block as sources:</p><p><code>console% terraform import aws_security_group_rule.rule_name sg-656c65616e6f72_ingress_tcp_80_80_self_2001:db8::/48</code></p>", "description": "<h1 id=\"resource-aws_security_group_rule\">Resource: aws_security_group_rule</h1><p>Provides a security group rule resource. Represents a single <code>ingress</code> or<br /><code>egress</code> group rule, which can be added to external Security Groups.</p><p>~&gt; <strong>NOTE on Security Groups and Security Group Rules:</strong> Terraform currently provides a <a href=\"security_group.html\">Security Group resource</a> with <code>ingress</code> and <code>egress</code> rules defined in-line and a Security Group Rule resource which manages one or more <code>ingress</code> or<br /><code>egress</code> rules. Both of these resource were added before AWS assigned a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html\">security group rule unique ID</a>, and they do not work well in all scenarios using the<code>description</code> and <code>tags</code> attributes, which rely on the unique ID.<br />The <a href=\"vpc_security_group_egress_rule.html\"><code>aws_vpc_security_group_egress_rule</code></a> and <a href=\"vpc_security_group_ingress_rule.html\"><code>aws_vpc_security_group_ingress_rule</code></a> resources have been added to address these limitations and should be used for all new security group rules.<br />You should not use the <code>aws_vpc_security_group_egress_rule</code> and <code>aws_vpc_security_group_ingress_rule</code> resources in conjunction with an <code>aws_security_group</code> resource with in-line rules or with <code>aws_security_group_rule</code> resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.</p><p>~&gt; <strong>NOTE:</strong> Setting <code>protocol = \"all\"</code> or <code>protocol = -1</code> with <code>from_port</code> and <code>to_port</code> will result in the EC2 API creating a security group rule with all ports open. This API behavior cannot be controlled by Terraform and may generate warnings in the future.</p><p>~&gt; <strong>NOTE:</strong> Referencing Security Groups across VPC peering has certain restrictions. More information is available in the <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html\">VPC Peering User Guide</a>.</p>"}