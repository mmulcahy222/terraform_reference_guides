{"resource-aws-api-gateway-deployment": "<h1 id=\"resource-aws_api_gateway_deployment\">Resource: aws_api_gateway_deployment</h1><p>Manages an API Gateway REST Deployment. A deployment is a snapshot of the REST API configuration. The deployment can then be published to callable endpoints via the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> and optionally managed further with the <a href=\"api_gateway_base_path_mapping.html\"><code>aws_api_gateway_base_path_mapping</code> resource</a>, <a href=\"api_gateway_domain_name.html\"><code>aws_api_gateway_domain_name</code> resource</a>, and <a href=\"api_gateway_method_settings.html\"><code>aws_api_method_settings</code> resource</a>. For more information, see the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html\">API Gateway Developer Guide</a>.</p><p>To properly capture all REST API configuration in a deployment, this resource must have dependencies on all prior Terraform resources that manage resources/paths, methods, integrations, etc.</p><ul><li>For REST APIs that are configured via OpenAPI specification (<a href=\"api_gateway_rest_api.html\"><code>aws_api_gateway_rest_api</code> resource</a> <code>body</code> argument), no special dependency setup is needed beyond referencing the  <code>id</code> attribute of that resource unless additional Terraform resources have further customized the REST API.</li><li>When the REST API configuration involves other Terraform resources (<a href=\"api_gateway_integration.html\"><code>aws_api_gateway_integration</code> resource</a>, etc.), the dependency setup can be done with implicit resource references in the <code>triggers</code> argument or explicit resource references using the <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html\">resource <code>depends_on</code> meta-argument</a>. The <code>triggers</code> argument should be preferred over <code>depends_on</code>, since <code>depends_on</code> can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.</li></ul><p>!&gt; <strong>WARNING:</strong> We recommend using the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> instead of managing an API Gateway Stage via the <code>stage_name</code> argument of this resource. When this resource is recreated (REST API redeployment) with the <code>stage_name</code> configured, the stage is deleted and recreated. This will cause a temporary service interruption, increase Terraform plan differences, and can require a second Terraform apply to recreate any downstream stage configuration such as associated <code>aws_api_method_settings</code> resources.</p><p>~&gt; <strong>NOTE:</strong> Enable the <a href=\"https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy\">resource <code>lifecycle</code> configuration block <code>create_before_destroy</code> argument</a> in this resource configuration to properly order redeployments in Terraform. Without enabling <code>create_before_destroy</code>, API Gateway can return errors such as <code>BadRequestException: Active stages pointing to this deployment must be moved or deleted</code> on recreation.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"openapi-specification\">OpenAPI Specification</h3><br /><p>An end-to-end example of a REST API configured with OpenAPI can be found in the <a href=\"https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/api-gateway-rest-api-openapi\"><code>/examples/api-gateway-rest-api-openapi</code> directory within the GitHub repository</a>.</p><br /><p>terraform<br />resource \"aws_api_gateway_rest_api\" \"example\" {<br />  body = jsonencode({<br />    openapi = \"3.0.1\"<br />    info = {<br />      title   = \"example\"<br />      version = \"1.0\"<br />    }<br />    paths = {<br />      \"/path1\" = {<br />        get = {<br />          x-amazon-apigateway-integration = {<br />            httpMethod           = \"GET\"<br />            payloadFormatVersion = \"1.0\"<br />            type                 = \"HTTP_PROXY\"<br />            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"<br />          }<br />        }<br />      }<br />    }<br />  })</p><br /><p>name = \"example\"<br />}</p><br /><p>resource \"aws_api_gateway_deployment\" \"example\" {<br />  rest_api_id = aws_api_gateway_rest_api.example.id</p><br /><p>triggers = {<br />    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))<br />  }</p><br /><p>lifecycle {<br />    create_before_destroy = true<br />  }<br />}</p><br /><p>resource \"aws_api_gateway_stage\" \"example\" {<br />  deployment_id = aws_api_gateway_deployment.example.id<br />  rest_api_id   = aws_api_gateway_rest_api.example.id<br />  stage_name    = \"example\"<br />}</p><br /><h3 id=\"terraform-resources\">Terraform Resources</h3><br /><p>terraform<br />resource \"aws_api_gateway_rest_api\" \"example\" {<br />  name = \"example\"<br />}</p><br /><p>resource \"aws_api_gateway_resource\" \"example\" {<br />  parent_id   = aws_api_gateway_rest_api.example.root_resource_id<br />  path_part   = \"example\"<br />  rest_api_id = aws_api_gateway_rest_api.example.id<br />}</p><br /><p>resource \"aws_api_gateway_method\" \"example\" {<br />  authorization = \"NONE\"<br />  http_method   = \"GET\"<br />  resource_id   = aws_api_gateway_resource.example.id<br />  rest_api_id   = aws_api_gateway_rest_api.example.id<br />}</p><br /><p>resource \"aws_api_gateway_integration\" \"example\" {<br />  http_method = aws_api_gateway_method.example.http_method<br />  resource_id = aws_api_gateway_resource.example.id<br />  rest_api_id = aws_api_gateway_rest_api.example.id<br />  type        = \"MOCK\"<br />}</p><br /><p>resource \"aws_api_gateway_deployment\" \"example\" {<br />  rest_api_id = aws_api_gateway_rest_api.example.id</p><br /><p>triggers = {<br />    # NOTE: The configuration below will satisfy ordering considerations,<br />    #       but not pick up all future REST API changes. More advanced patterns<br />    #       are possible, such as using the filesha1() function against the<br />    #       Terraform configuration file(s) or removing the .id references to<br />    #       calculate a hash against whole resources. Be aware that using whole<br />    #       resources will show a difference after the initial implementation.<br />    #       It will stabilize to only change when resources change afterwards.<br />    redeployment = sha1(jsonencode([<br />      aws_api_gateway_resource.example.id,<br />      aws_api_gateway_method.example.id,<br />      aws_api_gateway_integration.example.id,<br />    ]))<br />  }</p><br /><p>lifecycle {<br />    create_before_destroy = true<br />  }<br />}</p><br /><p>resource \"aws_api_gateway_stage\" \"example\" {<br />  deployment_id = aws_api_gateway_deployment.example.id<br />  rest_api_id   = aws_api_gateway_rest_api.example.id<br />  stage_name    = \"example\"<br />}</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>rest_api_id</code> - (Required) REST API identifier.</li><li><code>description</code> - (Optional) Description of the deployment</li><li><code>stage_name</code> - (Optional) Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> instead to manage stages.</li><li><code>stage_description</code> - (Optional) Description to set on the stage managed by the <code>stage_name</code> argument.</li><li><code>triggers</code> - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the <a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address\"><code>-replace</code> option</a> with <code>terraform plan</code> or <code>terraform apply</code>.</li><li><code>variables</code> - (Optional) Map to set on the stage managed by the <code>stage_name</code> argument.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - ID of the deployment</li><li><code>invoke_url</code> - URL to invoke the API pointing to the stage,<br />  e.g., <code>https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod</code></li><li><code>execution_arn</code> - Execution ARN to be used in <a href=\"/docs/providers/aws/r/lambda_permission.html\"><code>lambda_permission</code></a>'s <code>source_arn</code><br />  when allowing API Gateway to invoke a Lambda function,<br />  e.g., <code>arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod</code></li><li><code>created_date</code> - Creation date of the deployment</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import <code>aws_api_gateway_deployment</code> using <code>REST-API-ID/DEPLOYMENT-ID</code>. For example:</p><p>terraform<br />import {<br />  to = aws_api_gateway_deployment.example<br />  id = \"aabbccddee/1122334\"<br />}</p><p>Using <code>terraform import</code>, import <code>aws_api_gateway_deployment</code> using <code>REST-API-ID/DEPLOYMENT-ID</code>. For example:</p><p>console<br />% terraform import aws_api_gateway_deployment.example aabbccddee/1122334</p><p>The <code>stage_name</code>, <code>stage_description</code>, and <code>variables</code> arguments cannot be imported. Use the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> to import and manage stages.</p><p>The <code>triggers</code> argument cannot be imported.</p>", "description": "<h1 id=\"resource-aws_api_gateway_deployment\">Resource: aws_api_gateway_deployment</h1><p>Manages an API Gateway REST Deployment. A deployment is a snapshot of the REST API configuration. The deployment can then be published to callable endpoints via the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> and optionally managed further with the <a href=\"api_gateway_base_path_mapping.html\"><code>aws_api_gateway_base_path_mapping</code> resource</a>, <a href=\"api_gateway_domain_name.html\"><code>aws_api_gateway_domain_name</code> resource</a>, and <a href=\"api_gateway_method_settings.html\"><code>aws_api_method_settings</code> resource</a>. For more information, see the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html\">API Gateway Developer Guide</a>.</p><p>To properly capture all REST API configuration in a deployment, this resource must have dependencies on all prior Terraform resources that manage resources/paths, methods, integrations, etc.</p><ul><li>For REST APIs that are configured via OpenAPI specification (<a href=\"api_gateway_rest_api.html\"><code>aws_api_gateway_rest_api</code> resource</a> <code>body</code> argument), no special dependency setup is needed beyond referencing the  <code>id</code> attribute of that resource unless additional Terraform resources have further customized the REST API.</li><li>When the REST API configuration involves other Terraform resources (<a href=\"api_gateway_integration.html\"><code>aws_api_gateway_integration</code> resource</a>, etc.), the dependency setup can be done with implicit resource references in the <code>triggers</code> argument or explicit resource references using the <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html\">resource <code>depends_on</code> meta-argument</a>. The <code>triggers</code> argument should be preferred over <code>depends_on</code>, since <code>depends_on</code> can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.</li></ul><p>!&gt; <strong>WARNING:</strong> We recommend using the <a href=\"api_gateway_stage.html\"><code>aws_api_gateway_stage</code> resource</a> instead of managing an API Gateway Stage via the <code>stage_name</code> argument of this resource. When this resource is recreated (REST API redeployment) with the <code>stage_name</code> configured, the stage is deleted and recreated. This will cause a temporary service interruption, increase Terraform plan differences, and can require a second Terraform apply to recreate any downstream stage configuration such as associated <code>aws_api_method_settings</code> resources.</p><p>~&gt; <strong>NOTE:</strong> Enable the <a href=\"https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy\">resource <code>lifecycle</code> configuration block <code>create_before_destroy</code> argument</a> in this resource configuration to properly order redeployments in Terraform. Without enabling <code>create_before_destroy</code>, API Gateway can return errors such as <code>BadRequestException: Active stages pointing to this deployment must be moved or deleted</code> on recreation.</p>"}