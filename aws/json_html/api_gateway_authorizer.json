{"resource-aws-api-gateway-authorizer": "<h1 id=\"resource-aws_api_gateway_authorizer\">Resource: aws_api_gateway_authorizer</h1><p>Provides an API Gateway Authorizer.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_api_gateway_authorizer\" \"demo\" {<br />  name                   = \"demo\"<br />  rest_api_id            = aws_api_gateway_rest_api.demo.id<br />  authorizer_uri         = aws_lambda_function.authorizer.invoke_arn<br />  authorizer_credentials = aws_iam_role.invocation_role.arn<br />}</p><br /><p>resource \"aws_api_gateway_rest_api\" \"demo\" {<br />  name = \"auth-demo\"<br />}</p><br /><p>data \"aws_iam_policy_document\" \"invocation_assume_role\" {<br />  statement {<br />    effect = \"Allow\"</p><br /><pre><code>principals {<br />  type        = \"Service\"<br />  identifiers = [\"apigateway.amazonaws.com\"]<br />}<br /><br />actions = [\"sts:AssumeRole\"]<br /></code></pre><br /><p>}<br />}</p><br /><p>resource \"aws_iam_role\" \"invocation_role\" {<br />  name               = \"api_gateway_auth_invocation\"<br />  path               = \"/\"<br />  assume_role_policy = data.aws_iam_policy_document.invocation_assume_role.json<br />}</p><br /><p>data \"aws_iam_policy_document\" \"invocation_policy\" {<br />  statement {<br />    effect    = \"Allow\"<br />    actions   = [\"lambda:InvokeFunction\"]<br />    resources = [aws_lambda_function.authorizer.arn]<br />  }<br />}</p><br /><p>resource \"aws_iam_role_policy\" \"invocation_policy\" {<br />  name   = \"default\"<br />  role   = aws_iam_role.invocation_role.id<br />  policy = data.aws_iam_policy_document.invocation_policy.json<br />}</p><br /><p>data \"aws_iam_policy_document\" \"lambda_assume_role\" {<br />  statement {<br />    effect  = \"Allow\"<br />    actions = [\"sts:AssumeRole\"]</p><br /><pre><code>principals {<br />  type        = \"Service\"<br />  identifiers = [\"lambda.amazonaws.com\"]<br />}<br /></code></pre><br /><p>}<br />}</p><br /><p>resource \"aws_iam_role\" \"lambda\" {<br />  name               = \"demo-lambda\"<br />  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role.json<br />}</p><br /><p>resource \"aws_lambda_function\" \"authorizer\" {<br />  filename      = \"lambda-function.zip\"<br />  function_name = \"api_gateway_authorizer\"<br />  role          = aws_iam_role.lambda.arn<br />  handler       = \"exports.example\"</p><br /><p>source_code_hash = filebase64sha256(\"lambda-function.zip\")<br />}</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>authorizer_uri</code> - (Optional, required for type <code>TOKEN</code>/<code>REQUEST</code>) Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>,<br /> e.g., <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations</code></li><li><code>name</code> - (Required) Name of the authorizer</li><li><code>rest_api_id</code> - (Required) ID of the associated REST API</li><li><code>identity_source</code> - (Optional) Source of the identity in an incoming request. Defaults to <code>method.request.header.Authorization</code>. For <code>REQUEST</code> type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., <code>\"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName\"</code></li><li><code>type</code> - (Optional) Type of the authorizer. Possible values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, or <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool. Defaults to <code>TOKEN</code>.</li><li><code>authorizer_credentials</code> - (Optional) Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.</li><li><code>authorizer_result_ttl_in_seconds</code> - (Optional) TTL of cached authorizer results in seconds. Defaults to <code>300</code>.</li><li><code>identity_validation_expression</code> - (Optional) Validation expression for the incoming identity. For <code>TOKEN</code> type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.</li><li><code>provider_arns</code> - (Optional, required for type <code>COGNITO_USER_POOLS</code>) List of the Amazon Cognito user pool ARNs. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>arn</code> - ARN of the API Gateway Authorizer</li><li><code>id</code> - Authorizer identifier.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import AWS API Gateway Authorizer using the <code>REST-API-ID/AUTHORIZER-ID</code>. For example:</p><p>terraform<br />import {<br />  to = aws_api_gateway_authorizer.authorizer<br />  id = \"12345abcde/example\"<br />}</p><p>Using <code>terraform import</code>, import AWS API Gateway Authorizer using the <code>REST-API-ID/AUTHORIZER-ID</code>. For example:</p><p>console<br />% terraform import aws_api_gateway_authorizer.authorizer 12345abcde/example</p>", "description": "<h1 id=\"resource-aws_api_gateway_authorizer\">Resource: aws_api_gateway_authorizer</h1><p>Provides an API Gateway Authorizer.</p>"}