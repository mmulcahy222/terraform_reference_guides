{"resource-aws-lambda-layer-version": "<h1 id=\"resource-aws_lambda_layer_version\">Resource: aws_lambda_layer_version</h1><p>Provides a Lambda Layer Version resource. Lambda Layers allow you to reuse shared bits of code across multiple lambda functions.</p><p>For information about Lambda Layers and how to use them, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda Layers</a>.</p><p>~&gt; <strong>NOTE:</strong> Setting <code>skip_destroy</code> to <code>true</code> means that the AWS Provider will <em>not</em> destroy any layer version, even when running <code>terraform destroy</code>. Layer versions are thus intentional dangling resources that are <em>not</em> managed by Terraform and may incur extra expense in your AWS account.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_lambda_layer_version\" \"lambda_layer\" {<br />  filename   = \"lambda_layer_payload.zip\"<br />  layer_name = \"lambda_layer_name\"</p><br /><p>compatible_runtimes = [\"nodejs16.x\"]<br />}</p><br />", "specifying-the-deployment-package": "<h2 id=\"specifying-the-deployment-package\">Specifying the Deployment Package</h2><p>AWS Lambda Layers expect source code to be provided as a deployment package whose structure varies depending on which <code>compatible_runtimes</code> this layer specifies.<br />See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes\">Runtimes</a> for the valid values of <code>compatible_runtimes</code>.</p><p>Once you have created your deployment package you can specify it either directly as a local file (using the <code>filename</code> argument) or<br />indirectly via Amazon S3 (using the <code>s3_bucket</code>, <code>s3_key</code> and <code>s3_object_version</code> arguments). When providing the deployment<br />package via S3 it may be useful to use <a href=\"s3_object.html\">the <code>aws_s3_object</code> resource</a> to upload it.</p><p>For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading large files efficiently.</p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>The following arguments are required:</p><ul><li><code>layer_name</code> - (Required) Unique name for your Lambda Layer</li></ul><p>The following arguments are optional:</p><ul><li><code>compatible_architectures</code> - (Optional) List of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures\">Architectures</a> this layer is compatible with. Currently <code>x86_64</code> and <code>arm64</code> can be specified.</li><li><code>compatible_runtimes</code> - (Optional) List of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes\">Runtimes</a> this layer is compatible with. Up to 5 runtimes can be specified.</li><li><code>description</code> - (Optional) Description of what your Lambda Layer does.</li><li><code>filename</code> (Optional) Path to the function's deployment package within the local filesystem. If defined, The <code>s3_</code>-prefixed options cannot be used.</li><li><code>license_info</code> - (Optional) License info for your Lambda Layer. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo\">License Info</a>.</li><li><code>s3_bucket</code> - (Optional) S3 bucket location containing the function's deployment package. Conflicts with <code>filename</code>. This bucket must reside in the same AWS region where you are creating the Lambda function.</li><li><code>s3_key</code> - (Optional) S3 key of an object containing the function's deployment package. Conflicts with <code>filename</code>.</li><li><code>s3_object_version</code> - (Optional) Object version containing the function's deployment package. Conflicts with <code>filename</code>.</li><li><code>skip_destroy</code> - (Optional) Whether to retain the old version of a previously deployed Lambda Layer. Default is <code>false</code>. When this is not set to <code>true</code>, changing any of <code>compatible_architectures</code>, <code>compatible_runtimes</code>, <code>description</code>, <code>filename</code>, <code>layer_name</code>, <code>license_info</code>, <code>s3_bucket</code>, <code>s3_key</code>, <code>s3_object_version</code>, or <code>source_code_hash</code> forces deletion of the existing layer version and creation of a new layer version.</li><li><code>source_code_hash</code> - (Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either <code>filename</code> or <code>s3_key</code>. The usual way to set this is <code>${filebase64sha256(\"file.zip\")}</code> (Terraform 0.11.12 or later) or <code>${base64sha256(file(\"file.zip\"))}</code> (Terraform 0.11.11 and earlier), where \"file.zip\" is the local filename of the lambda layer source archive.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>arn</code> - ARN of the Lambda Layer with version.</li><li><code>created_date</code> - Date this resource was created.</li><li><code>layer_arn</code> - ARN of the Lambda Layer without version.</li><li><code>signing_job_arn</code> - ARN of a signing job.</li><li><code>signing_profile_version_arn</code> - ARN for a signing profile version.</li><li><code>source_code_size</code> - Size in bytes of the function .zip file.</li><li><code>version</code> - Lambda Layer version.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Lambda Layers using <code>arn</code>. For example:</p><p>terraform<br />import {<br />  to = aws_lambda_layer_version.test_layer<br />  id = \"arn:aws:lambda:<em>REGION</em>:<em>ACCOUNT_ID</em>:layer:<em>LAYER_NAME</em>:<em>LAYER_VERSION</em>\"<br />}</p><p>Using <code>terraform import</code>, import Lambda Layers using <code>arn</code>. For example:</p><p>console<br />% terraform import \\<br />    aws_lambda_layer_version.test_layer \\<br />    arn:aws:lambda:<em>REGION</em>:<em>ACCOUNT_ID</em>:layer:<em>LAYER_NAME</em>:<em>LAYER_VERSION</em></p>", "description": "<h1 id=\"resource-aws_lambda_layer_version\">Resource: aws_lambda_layer_version</h1><p>Provides a Lambda Layer Version resource. Lambda Layers allow you to reuse shared bits of code across multiple lambda functions.</p><p>For information about Lambda Layers and how to use them, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda Layers</a>.</p><p>~&gt; <strong>NOTE:</strong> Setting <code>skip_destroy</code> to <code>true</code> means that the AWS Provider will <em>not</em> destroy any layer version, even when running <code>terraform destroy</code>. Layer versions are thus intentional dangling resources that are <em>not</em> managed by Terraform and may incur extra expense in your AWS account.</p>"}