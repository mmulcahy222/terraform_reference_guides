{"resource-aws-route-table": "<h1 id=\"resource-aws_route_table\">Resource: aws_route_table</h1><p>Provides a resource to create a VPC routing table.</p><p>~&gt; <strong>NOTE on Route Tables and Routes:</strong> Terraform currently<br />provides both a standalone <a href=\"route.html\">Route resource</a> and a Route Table resource with routes<br />defined in-line. At this time you cannot use a Route Table with in-line routes<br />in conjunction with any Route resources. Doing so will cause<br />a conflict of rule settings and will overwrite rules.</p><p>~&gt; <strong>NOTE on <code>gateway_id</code> and <code>nat_gateway_id</code>:</strong> The AWS API is very forgiving with these two<br />attributes and the <code>aws_route_table</code> resource can be created with a NAT ID specified as a Gateway ID attribute.<br />This <em>will</em> lead to a permanent diff between your configuration and statefile, as the API returns the correct<br />parameters in the returned route table. If you're experiencing constant diffs in your <code>aws_route_table</code> resources,<br />the first thing to check is whether or not you're specifying a NAT ID instead of a Gateway ID, or vice-versa.</p><p>~&gt; <strong>NOTE on <code>propagating_vgws</code> and the <code>aws_vpn_gateway_route_propagation</code> resource:</strong><br />If the <code>propagating_vgws</code> argument is present, it's not supported to <em>also</em><br />define route propagations using <code>aws_vpn_gateway_route_propagation</code>, since<br />this resource will delete any propagating gateways not explicitly listed in<br /><code>propagating_vgws</code>. Omit this argument when defining route propagation using<br />the separate resource.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"basic-example\">Basic example</h3><br /><p>terraform<br />resource \"aws_route_table\" \"example\" {<br />  vpc_id = aws_vpc.example.id</p><br /><p>route {<br />    cidr_block = \"10.0.1.0/24\"<br />    gateway_id = aws_internet_gateway.example.id<br />  }</p><br /><p>route {<br />    ipv6_cidr_block        = \"::/0\"<br />    egress_only_gateway_id = aws_egress_only_internet_gateway.example.id<br />  }</p><br /><p>tags = {<br />    Name = \"example\"<br />  }<br />}</p><br /><p>To subsequently remove all managed routes:</p><br /><p>terraform<br />resource \"aws_route_table\" \"example\" {<br />  vpc_id = aws_vpc.example.id</p><br /><p>route = []</p><br /><p>tags = {<br />    Name = \"example\"<br />  }<br />}</p><br /><h3 id=\"adopting-an-existing-local-route\">Adopting an existing local route</h3><br /><p>AWS creates certain routes that the AWS provider mostly ignores. You can manage them by importing or adopting them. See <a href=\"#import\">Import</a> below for information on importing. This example shows adopting a route and then updating its target.</p><br /><p>First, adopt an existing AWS-created route:</p><br /><p>terraform<br />resource \"aws_vpc\" \"test\" {<br />  cidr_block = \"10.1.0.0/16\"<br />}</p><br /><p>resource \"aws_route_table\" \"test\" {<br />  vpc_id = aws_vpc.test.id</p><br /><p># since this is exactly the route AWS will create, the route will be adopted<br />  route {<br />    cidr_block = \"10.1.0.0/16\"<br />    gateway_id = \"local\"<br />  }<br />}</p><br /><p>Next, update the target of the route:</p><br /><p>terraform<br />resource \"aws_vpc\" \"test\" {<br />  cidr_block = \"10.1.0.0/16\"<br />}</p><br /><p>resource \"aws_route_table\" \"test\" {<br />  vpc_id = aws_vpc.test.id</p><br /><p>route {<br />    cidr_block           = aws_vpc.test.cidr_block<br />    network_interface_id = aws_network_interface.test.id<br />  }<br />}</p><br /><p>resource \"aws_subnet\" \"test\" {<br />  cidr_block = \"10.1.1.0/24\"<br />  vpc_id     = aws_vpc.test.id<br />}</p><br /><p>resource \"aws_network_interface\" \"test\" {<br />  subnet_id = aws_subnet.test.id<br />}</p><br /><p>The target could then be updated again back to <code>local</code>.</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>vpc_id</code> - (Required) The VPC ID.</li><li><code>route</code> - (Optional) A list of route objects. Their keys are documented below. This argument is processed in <a href=\"https://www.terraform.io/docs/configuration/attr-as-blocks.html\">attribute-as-blocks mode</a>.<br />This means that omitting this argument is interpreted as ignoring any existing routes. To remove all managed routes an empty list should be specified. See the example above.</li><li><code>tags</code> - (Optional) A map of tags to assign to the resource. If configured with a provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a> present, tags with matching keys will overwrite those defined at the provider-level.</li><li><code>propagating_vgws</code> - (Optional) A list of virtual gateways for propagation.</li></ul><h3 id=\"route-argument-reference\">route Argument Reference</h3><p>This argument is processed in <a href=\"https://www.terraform.io/docs/configuration/attr-as-blocks.html\">attribute-as-blocks mode</a>.</p><p>One of the following destination arguments must be supplied:</p><ul><li><code>cidr_block</code> - (Required) The CIDR block of the route.</li><li><code>ipv6_cidr_block</code> - (Optional) The Ipv6 CIDR block of the route.</li><li><code>destination_prefix_list_id</code> - (Optional) The ID of a <a href=\"ec2_managed_prefix_list.html\">managed prefix list</a> destination of the route.</li></ul><p>One of the following target arguments must be supplied:</p><ul><li><code>carrier_gateway_id</code> - (Optional) Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.</li><li><code>core_network_arn</code> - (Optional) The Amazon Resource Name (ARN) of a core network.</li><li><code>egress_only_gateway_id</code> - (Optional) Identifier of a VPC Egress Only Internet Gateway.</li><li><code>gateway_id</code> - (Optional) Identifier of a VPC internet gateway, virtual private gateway, or <code>local</code>. <code>local</code> routes cannot be created but can be adopted or imported. See the <a href=\"#adopting-an-existing-local-route\">example</a> above.</li><li><code>local_gateway_id</code> - (Optional) Identifier of a Outpost local gateway.</li><li><code>nat_gateway_id</code> - (Optional) Identifier of a VPC NAT gateway.</li><li><code>network_interface_id</code> - (Optional) Identifier of an EC2 network interface.</li><li><code>transit_gateway_id</code> - (Optional) Identifier of an EC2 Transit Gateway.</li><li><code>vpc_endpoint_id</code> - (Optional) Identifier of a VPC Endpoint.</li><li><code>vpc_peering_connection_id</code> - (Optional) Identifier of a VPC peering connection.</li></ul><p>Note that the default route, mapping the VPC's CIDR block to \"local\", is created implicitly and cannot be specified.</p>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><p>~&gt; <strong>NOTE:</strong> Only the target that is entered is exported as a readable<br />attribute once the route resource is created.</p><ul><li><code>id</code> - The ID of the routing table.</li><li><code>arn</code> - The ARN of the route table.</li><li><code>owner_id</code> - The ID of the AWS account that owns the route table.</li><li><code>tags_all</code> - A map of tags assigned to the resource, including those inherited from the provider <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block\"><code>default_tags</code> configuration block</a>.</li></ul>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts\">Configuration options</a>:</p><ul><li><code>create</code> - (Default <code>5m</code>)</li><li><code>update</code> - (Default <code>2m</code>)</li><li><code>delete</code> - (Default <code>5m</code>)</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Route Tables using the route table <code>id</code>. For example:</p><p>terraform<br />import {<br />  to = aws_route_table.public_rt<br />  id = \"rtb-4e616f6d69\"<br />}</p><p>Using <code>terraform import</code>, import Route Tables using the route table <code>id</code>. For example:</p><p>console<br />% terraform import aws_route_table.public_rt rtb-4e616f6d69</p>", "description": "<h1 id=\"resource-aws_route_table\">Resource: aws_route_table</h1><p>Provides a resource to create a VPC routing table.</p><p>~&gt; <strong>NOTE on Route Tables and Routes:</strong> Terraform currently<br />provides both a standalone <a href=\"route.html\">Route resource</a> and a Route Table resource with routes<br />defined in-line. At this time you cannot use a Route Table with in-line routes<br />in conjunction with any Route resources. Doing so will cause<br />a conflict of rule settings and will overwrite rules.</p><p>~&gt; <strong>NOTE on <code>gateway_id</code> and <code>nat_gateway_id</code>:</strong> The AWS API is very forgiving with these two<br />attributes and the <code>aws_route_table</code> resource can be created with a NAT ID specified as a Gateway ID attribute.<br />This <em>will</em> lead to a permanent diff between your configuration and statefile, as the API returns the correct<br />parameters in the returned route table. If you're experiencing constant diffs in your <code>aws_route_table</code> resources,<br />the first thing to check is whether or not you're specifying a NAT ID instead of a Gateway ID, or vice-versa.</p><p>~&gt; <strong>NOTE on <code>propagating_vgws</code> and the <code>aws_vpn_gateway_route_propagation</code> resource:</strong><br />If the <code>propagating_vgws</code> argument is present, it's not supported to <em>also</em><br />define route propagations using <code>aws_vpn_gateway_route_propagation</code>, since<br />this resource will delete any propagating gateways not explicitly listed in<br /><code>propagating_vgws</code>. Omit this argument when defining route propagation using<br />the separate resource.</p>"}