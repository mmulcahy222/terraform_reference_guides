{"resource-aws-apigatewayv2-deployment": "<h1 id=\"resource-aws_apigatewayv2_deployment\">Resource: aws_apigatewayv2_deployment</h1><p>Manages an Amazon API Gateway Version 2 deployment.<br />More information can be found in the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html\">Amazon API Gateway Developer Guide</a>.</p><p>-&gt; <strong>Note:</strong> Creating a deployment for an API requires at least one <code>aws_apigatewayv2_route</code> resource associated with that API. To avoid race conditions when all resources are being created together, you need to add implicit resource references via the <code>triggers</code> argument or explicit resource references using the <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html\">resource <code>depends_on</code> meta-argument</a>.</p><p>-&gt; Enable the <a href=\"https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy\">resource <code>lifecycle</code> configuration block <code>create_before_destroy</code> argument</a> in this resource configuration to properly order redeployments in Terraform.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"basic\">Basic</h3><p>terraform<br />resource \"aws_apigatewayv2_deployment\" \"example\" {<br />  api_id      = aws_apigatewayv2_api.example.id<br />  description = \"Example deployment\"</p><p>lifecycle {<br />    create_before_destroy = true<br />  }<br />}<br /></p><h3 id=\"redeployment-triggers\">Redeployment Triggers</h3><p>-&gt; <strong>NOTE:</strong> This is an optional and Terraform 0.12 (or later) advanced configuration that shows calculating a hash of the API's Terraform resources to determine changes that should trigger a new deployment. This value will change after the first Terraform apply of new resources, triggering an immediate redeployment, however it will stabilize afterwards except for resource changes. The <code>triggers</code> map can also be configured in other, more complex ways to fit the environment, avoiding the immediate redeployment issue.</p><p>terraform<br />resource \"aws_apigatewayv2_deployment\" \"example\" {<br />  api_id      = aws_apigatewayv2_api.example.id<br />  description = \"Example deployment\"</p><p>triggers = {<br />    redeployment = sha1(join(\",\", tolist([<br />      jsonencode(aws_apigatewayv2_integration.example),<br />      jsonencode(aws_apigatewayv2_route.example),<br />    ])))<br />  }</p><p>lifecycle {<br />    create_before_destroy = true<br />  }<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>api_id</code> - (Required) API identifier.</li><li><code>description</code> - (Optional) Description for the deployment resource. Must be less than or equal to 1024 characters in length.</li><li><code>triggers</code> - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the <a href=\"https://www.terraform.io/docs/commands/taint.html\"><code>terraform taint</code> command</a>.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - Deployment identifier.</li><li><code>auto_deployed</code> - Whether the deployment was automatically released.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import <code>aws_apigatewayv2_deployment</code> using the API identifier and deployment identifier. For example:</p><p><code>terraformimport {  to = aws_apigatewayv2_deployment.example  id = \"aabbccddee/1122334\"}</code></p><p>Using <code>terraform import</code>, import <code>aws_apigatewayv2_deployment</code> using the API identifier and deployment identifier. For example:</p><p><code>console% terraform import aws_apigatewayv2_deployment.example aabbccddee/1122334</code></p><p>The <code>triggers</code> argument cannot be imported.</p>", "description": "<h1 id=\"resource-aws_apigatewayv2_deployment\">Resource: aws_apigatewayv2_deployment</h1><p>Manages an Amazon API Gateway Version 2 deployment.<br />More information can be found in the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html\">Amazon API Gateway Developer Guide</a>.</p><p>-&gt; <strong>Note:</strong> Creating a deployment for an API requires at least one <code>aws_apigatewayv2_route</code> resource associated with that API. To avoid race conditions when all resources are being created together, you need to add implicit resource references via the <code>triggers</code> argument or explicit resource references using the <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html\">resource <code>depends_on</code> meta-argument</a>.</p><p>-&gt; Enable the <a href=\"https://www.terraform.io/language/meta-arguments/lifecycle#create_before_destroy\">resource <code>lifecycle</code> configuration block <code>create_before_destroy</code> argument</a> in this resource configuration to properly order redeployments in Terraform.</p>"}