{"resource-aws-route": "<h1 id=\"resource-aws_route\">Resource: aws_route</h1><p>Provides a resource to create a routing table entry (a route) in a VPC routing table.</p><p>~&gt; <strong>NOTE on Route Tables and Routes:</strong> Terraform currently provides both a standalone Route resource and a <a href=\"route_table.html\">Route Table</a> resource with routes defined in-line. At this time you cannot use a Route Table with in-line routes in conjunction with any Route resources. Doing so will cause a conflict of rule settings and will overwrite rules.</p><p>~&gt; <strong>NOTE on <code>gateway_id</code> attribute:</strong> The AWS API is very forgiving with the resource ID passed in the <code>gateway_id</code> attribute. For example an <code>aws_route</code> resource can be created with an <a href=\"nat_gateway.html\"><code>aws_nat_gateway</code></a> or <a href=\"egress_only_internet_gateway.html\"><code>aws_egress_only_internet_gateway</code></a> ID specified for the <code>gateway_id</code> attribute. Specifying anything other than an <a href=\"internet_gateway.html\"><code>aws_internet_gateway</code></a> or <a href=\"vpn_gateway.html\"><code>aws_vpn_gateway</code></a> ID will lead to Terraform reporting a permanent diff between your configuration and recorded state, as the AWS API returns the more-specific attribute. If you are experiencing constant diffs with an <code>aws_route</code> resource, the first thing to check is that the correct attribute is being specified.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p><code>terraformresource \"aws_route\" \"r\" {  route_table_id            = \"rtb-4fbb3ac4\"  destination_cidr_block    = \"10.0.1.0/22\"  vpc_peering_connection_id = \"pcx-45ff3dc1\"  depends_on                = [aws_route_table.testing]}</code></p>", "example-ipv6-usage": "<h2 id=\"example-ipv6-usage\">Example IPv6 Usage</h2><p>terraform<br />resource \"aws_vpc\" \"vpc\" {<br />  cidr_block                       = \"10.1.0.0/16\"<br />  assign_generated_ipv6_cidr_block = true<br />}</p><p>resource \"aws_egress_only_internet_gateway\" \"egress\" {<br />  vpc_id = aws_vpc.vpc.id<br />}</p><p>resource \"aws_route\" \"r\" {<br />  route_table_id              = \"rtb-4fbb3ac4\"<br />  destination_ipv6_cidr_block = \"::/0\"<br />  egress_only_gateway_id      = aws_egress_only_internet_gateway.egress.id<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>route_table_id</code> - (Required) The ID of the routing table.</li></ul><p>One of the following destination arguments must be supplied:</p><ul><li><code>destination_cidr_block</code> - (Optional) The destination CIDR block.</li><li><code>destination_ipv6_cidr_block</code> - (Optional) The destination IPv6 CIDR block.</li><li><code>destination_prefix_list_id</code> - (Optional) The ID of a <a href=\"ec2_managed_prefix_list.html\">managed prefix list</a> destination.</li></ul><p>One of the following target arguments must be supplied:</p><ul><li><code>carrier_gateway_id</code> - (Optional) Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.</li><li><code>core_network_arn</code> - (Optional) The Amazon Resource Name (ARN) of a core network.</li><li><code>egress_only_gateway_id</code> - (Optional) Identifier of a VPC Egress Only Internet Gateway.</li><li><code>gateway_id</code> - (Optional) Identifier of a VPC internet gateway or a virtual private gateway. Specify <code>local</code> when updating a previously <a href=\"#import\">imported</a> local route.</li><li><code>nat_gateway_id</code> - (Optional) Identifier of a VPC NAT gateway.</li><li><code>local_gateway_id</code> - (Optional) Identifier of a Outpost local gateway.</li><li><code>network_interface_id</code> - (Optional) Identifier of an EC2 network interface.</li><li><code>transit_gateway_id</code> - (Optional) Identifier of an EC2 Transit Gateway.</li><li><code>vpc_endpoint_id</code> - (Optional) Identifier of a VPC Endpoint.</li><li><code>vpc_peering_connection_id</code> - (Optional) Identifier of a VPC peering connection.</li></ul><p>Note that the default route, mapping the VPC's CIDR block to \"local\", is created implicitly and cannot be specified.</p>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><p>~&gt; <strong>NOTE:</strong> Only the arguments that are configured (one of the above) will be exported as an attribute once the resource is created.</p><ul><li><code>id</code> - Route identifier computed from the routing table identifier and route destination.</li><li><code>instance_id</code> - Identifier of an EC2 instance.</li><li><code>instance_owner_id</code> - The AWS account ID of the owner of the EC2 instance.</li><li><code>origin</code> - How the route was created - <code>CreateRouteTable</code>, <code>CreateRoute</code> or <code>EnableVgwRoutePropagation</code>.</li><li><code>state</code> - The state of the route - <code>active</code> or <code>blackhole</code>.</li></ul>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts\">Configuration options</a>:</p><ul><li><code>create</code> - (Default <code>5m</code>)</li><li><code>update</code> - (Default <code>2m</code>)</li><li><code>delete</code> - (Default <code>5m</code>)</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import individual routes using <code>ROUTETABLEID_DESTINATION</code>. Import <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#RouteTables\">local routes</a> using the VPC's IPv4 or IPv6 CIDR blocks. For example:</p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with an IPv4 destination CIDR of <code>10.42.0.0/16</code>:</p><p><code>terraformimport {  to = aws_route.my_route  id = \"rtb-656C65616E6F72_10.42.0.0/16\"}</code></p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with an IPv6 destination CIDR of <code>2620:0:2d0:200::8/125</code>:</p><p><code>terraformimport {  to = aws_route.my_route  id = \"rtb-656C65616E6F72_2620:0:2d0:200::8/125\"}</code></p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with a managed prefix list destination of <code>pl-0570a1d2d725c16be</code>:</p><p><code>terraformimport {  to = aws_route.my_route  id = \"rtb-656C65616E6F72_pl-0570a1d2d725c16be\"}</code></p><p><strong>Using <code>terraform import</code> to import</strong> individual routes using <code>ROUTETABLEID_DESTINATION</code>. Import <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#RouteTables\">local routes</a> using the VPC's IPv4 or IPv6 CIDR blocks. For example:</p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with an IPv4 destination CIDR of <code>10.42.0.0/16</code>:</p><p><code>console% terraform import aws_route.my_route rtb-656C65616E6F72_10.42.0.0/16</code></p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with an IPv6 destination CIDR of <code>2620:0:2d0:200::8/125</code>:</p><p><code>console% terraform import aws_route.my_route rtb-656C65616E6F72_2620:0:2d0:200::8/125</code></p><p>Import a route in route table <code>rtb-656C65616E6F72</code> with a managed prefix list destination of <code>pl-0570a1d2d725c16be</code>:</p><p><code>console% terraform import aws_route.my_route rtb-656C65616E6F72_pl-0570a1d2d725c16be</code></p>", "description": "<h1 id=\"resource-aws_route\">Resource: aws_route</h1><p>Provides a resource to create a routing table entry (a route) in a VPC routing table.</p><p>~&gt; <strong>NOTE on Route Tables and Routes:</strong> Terraform currently provides both a standalone Route resource and a <a href=\"route_table.html\">Route Table</a> resource with routes defined in-line. At this time you cannot use a Route Table with in-line routes in conjunction with any Route resources. Doing so will cause a conflict of rule settings and will overwrite rules.</p><p>~&gt; <strong>NOTE on <code>gateway_id</code> attribute:</strong> The AWS API is very forgiving with the resource ID passed in the <code>gateway_id</code> attribute. For example an <code>aws_route</code> resource can be created with an <a href=\"nat_gateway.html\"><code>aws_nat_gateway</code></a> or <a href=\"egress_only_internet_gateway.html\"><code>aws_egress_only_internet_gateway</code></a> ID specified for the <code>gateway_id</code> attribute. Specifying anything other than an <a href=\"internet_gateway.html\"><code>aws_internet_gateway</code></a> or <a href=\"vpn_gateway.html\"><code>aws_vpn_gateway</code></a> ID will lead to Terraform reporting a permanent diff between your configuration and recorded state, as the AWS API returns the more-specific attribute. If you are experiencing constant diffs with an <code>aws_route</code> resource, the first thing to check is that the correct attribute is being specified.</p>"}