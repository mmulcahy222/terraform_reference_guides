{"resource-aws-autoscaling-group": "<h1 id=\"resource-aws_autoscaling_group\">Resource: aws_autoscaling_group</h1><p>Provides an Auto Scaling Group resource.</p><p>-&gt; <strong>Note:</strong> You must specify either <code>launch_configuration</code>, <code>launch_template</code>, or <code>mixed_instances_policy</code>.</p><p>~&gt; <strong>NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:</strong> Terraform provides standalone <a href=\"autoscaling_attachment.html\">Attachment</a> (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and <a href=\"autoscaling_traffic_source_attachment.html\">Traffic Source Attachment</a> (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with <code>load_balancers</code>, <code>target_group_arns</code> and <code>traffic_source</code> attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html\"><code>lifecycle</code> configuration block</a> can be used to suppress differences if necessary.</p><blockquote><p><strong>Hands-on:</strong> Try the <a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-asg?utm_source=WEBSITE&amp;utm_medium=WEB_IO&amp;utm_offer=ARTICLE_PAGE&amp;utm_content=DOCS\">Manage AWS Auto Scaling Groups</a> tutorial on HashiCorp Learn.</p></blockquote>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_placement_group\" \"test\" {<br />  name     = \"test\"<br />  strategy = \"cluster\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"bar\" {<br />  name                      = \"foobar3-terraform-test\"<br />  max_size                  = 5<br />  min_size                  = 2<br />  health_check_grace_period = 300<br />  health_check_type         = \"ELB\"<br />  desired_capacity          = 4<br />  force_delete              = true<br />  placement_group           = aws_placement_group.test.id<br />  launch_configuration      = aws_launch_configuration.foobar.name<br />  vpc_zone_identifier       = [aws_subnet.example1.id, aws_subnet.example2.id]</p><br /><p>initial_lifecycle_hook {<br />    name                 = \"foobar\"<br />    default_result       = \"CONTINUE\"<br />    heartbeat_timeout    = 2000<br />    lifecycle_transition = \"autoscaling:EC2_INSTANCE_LAUNCHING\"</p><br /><pre><code>notification_metadata = jsonencode({<br />  foo = \"bar\"<br />})<br /><br />notification_target_arn = \"arn:aws:sqs:us-east-1:444455556666:queue1*\"<br />role_arn                = \"arn:aws:iam::123456789012:role/S3Access\"<br /></code></pre><br /><p>}</p><br /><p>tag {<br />    key                 = \"foo\"<br />    value               = \"bar\"<br />    propagate_at_launch = true<br />  }</p><br /><p>timeouts {<br />    delete = \"15m\"<br />  }</p><br /><p>tag {<br />    key                 = \"lorem\"<br />    value               = \"ipsum\"<br />    propagate_at_launch = false<br />  }<br />}</p><br /><h3 id=\"with-latest-version-of-launch-template\">With Latest Version Of Launch Template</h3><br /><p>terraform<br />resource \"aws_launch_template\" \"foobar\" {<br />  name_prefix   = \"foobar\"<br />  image_id      = \"ami-1a2b3c\"<br />  instance_type = \"t2.micro\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"bar\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 1<br />  min_size           = 1</p><br /><p>launch_template {<br />    id      = aws_launch_template.foobar.id<br />    version = \"$Latest\"<br />  }<br />}</p><br /><h3 id=\"mixed-instances-policy\">Mixed Instances Policy</h3><br /><p>terraform<br />resource \"aws_launch_template\" \"example\" {<br />  name_prefix   = \"example\"<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"c5.large\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"example\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 1<br />  min_size           = 1</p><br /><p>mixed_instances_policy {<br />    launch_template {<br />      launch_template_specification {<br />        launch_template_id = aws_launch_template.example.id<br />      }</p><br /><pre><code>  override {<br />    instance_type     = \"c4.large\"<br />    weighted_capacity = \"3\"<br />  }<br /><br />  override {<br />    instance_type     = \"c3.large\"<br />    weighted_capacity = \"2\"<br />  }<br />}<br /></code></pre><br /><p>}<br />}</p><br /><h3 id=\"mixed-instances-policy-with-spot-instances-and-capacity-rebalance\">Mixed Instances Policy with Spot Instances and Capacity Rebalance</h3><br /><p>terraform<br />resource \"aws_launch_template\" \"example\" {<br />  name_prefix   = \"example\"<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"c5.large\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"example\" {<br />  capacity_rebalance  = true<br />  desired_capacity    = 12<br />  max_size            = 15<br />  min_size            = 12<br />  vpc_zone_identifier = [aws_subnet.example1.id, aws_subnet.example2.id]</p><br /><p>mixed_instances_policy {<br />    instances_distribution {<br />      on_demand_base_capacity                  = 0<br />      on_demand_percentage_above_base_capacity = 25<br />      spot_allocation_strategy                 = \"capacity-optimized\"<br />    }</p><br /><pre><code>launch_template {<br />  launch_template_specification {<br />    launch_template_id = aws_launch_template.example.id<br />  }<br /><br />  override {<br />    instance_type     = \"c4.large\"<br />    weighted_capacity = \"3\"<br />  }<br /><br />  override {<br />    instance_type     = \"c3.large\"<br />    weighted_capacity = \"2\"<br />  }<br />}<br /></code></pre><br /><p>}<br />}</p><br /><h3 id=\"mixed-instances-policy-with-instance-level-launchtemplatespecification-overrides\">Mixed Instances Policy with Instance level LaunchTemplateSpecification Overrides</h3><br /><p>When using a diverse instance set, some instance types might require a launch template with configuration values unique to that instance type such as a different AMI (Graviton2), architecture specific user data script, different EBS configuration, or different networking configuration.</p><br /><p>terraform<br />resource \"aws_launch_template\" \"example\" {<br />  name_prefix   = \"example\"<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"c5.large\"<br />}</p><br /><p>resource \"aws_launch_template\" \"example2\" {<br />  name_prefix = \"example2\"<br />  image_id    = data.aws_ami.example2.id<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"example\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 1<br />  min_size           = 1</p><br /><p>mixed_instances_policy {<br />    launch_template {<br />      launch_template_specification {<br />        launch_template_id = aws_launch_template.example.id<br />      }</p><br /><pre><code>  override {<br />    instance_type     = \"c4.large\"<br />    weighted_capacity = \"3\"<br />  }<br /><br />  override {<br />    instance_type = \"c6g.large\"<br />    launch_template_specification {<br />      launch_template_id = aws_launch_template.example2.id<br />    }<br />    weighted_capacity = \"2\"<br />  }<br />}<br /></code></pre><br /><p>}<br />}</p><br /><h3 id=\"mixed-instances-policy-with-attribute-based-instance-type-selection\">Mixed Instances Policy with Attribute-based Instance Type Selection</h3><br /><p>As an alternative to manually choosing instance types when creating a mixed instances group, you can specify a set of instance attributes that describe your compute requirements.</p><br /><p>terraform<br />resource \"aws_launch_template\" \"example\" {<br />  name_prefix   = \"example\"<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"c5.large\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"example\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 1<br />  min_size           = 1</p><br /><p>mixed_instances_policy {<br />    launch_template {<br />      launch_template_specification {<br />        launch_template_id = aws_launch_template.example.id<br />      }</p><br /><pre><code>  override {<br />    instance_requirements {<br />      memory_mib {<br />        min = 1000<br />      }<br /><br />      vcpu_count {<br />        min = 4<br />      }<br />    }<br />  }<br />}<br /></code></pre><br /><p>}<br />}</p><br /><h3 id=\"dynamic-tagging\">Dynamic tagging</h3><br /><p>terraform<br />variable \"extra_tags\" {<br />  default = [<br />    {<br />      key                 = \"Foo\"<br />      value               = \"Bar\"<br />      propagate_at_launch = true<br />    },<br />    {<br />      key                 = \"Baz\"<br />      value               = \"Bam\"<br />      propagate_at_launch = true<br />    },<br />  ]<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"test\" {<br />  name                 = \"foobar3-terraform-test\"<br />  max_size             = 5<br />  min_size             = 2<br />  launch_configuration = aws_launch_configuration.foobar.name<br />  vpc_zone_identifier  = [aws_subnet.example1.id, aws_subnet.example2.id]</p><br /><p>tag {<br />    key                 = \"explicit1\"<br />    value               = \"value1\"<br />    propagate_at_launch = true<br />  }<br />  tag {<br />    key                 = \"explicit2\"<br />    value               = \"value2\"<br />    propagate_at_launch = true<br />  }</p><br /><p>dynamic \"tag\" {<br />    for_each = var.extra_tags<br />    content {<br />      key                 = tag.value.key<br />      propagate_at_launch = tag.value.propagate_at_launch<br />      value               = tag.value.value<br />    }<br />  }<br />}</p><br /><h3 id=\"automatically-refresh-all-instances-after-the-group-is-updated\">Automatically refresh all instances after the group is updated</h3><br /><p>terraform<br />resource \"aws_autoscaling_group\" \"example\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 2<br />  min_size           = 1</p><br /><p>launch_template {<br />    id      = aws_launch_template.example.id<br />    version = aws_launch_template.example.latest_version<br />  }</p><br /><p>tag {<br />    key                 = \"Key\"<br />    value               = \"Value\"<br />    propagate_at_launch = true<br />  }</p><br /><p>instance_refresh {<br />    strategy = \"Rolling\"<br />    preferences {<br />      min_healthy_percentage = 50<br />    }<br />    triggers = [\"tag\"]<br />  }<br />}</p><br /><p>data \"aws_ami\" \"example\" {<br />  most_recent = true<br />  owners      = [\"amazon\"]</p><br /><p>filter {<br />    name   = \"name\"<br />    values = [\"amzn-ami-hvm-*-x86_64-gp2\"]<br />  }<br />}</p><br /><p>resource \"aws_launch_template\" \"example\" {<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"t3.nano\"<br />}</p><br /><h3 id=\"auto-scaling-group-with-warm-pool\">Auto Scaling group with Warm Pool</h3><br /><p>terraform<br />resource \"aws_launch_template\" \"example\" {<br />  name_prefix   = \"example\"<br />  image_id      = data.aws_ami.example.id<br />  instance_type = \"c5.large\"<br />}</p><br /><p>resource \"aws_autoscaling_group\" \"example\" {<br />  availability_zones = [\"us-east-1a\"]<br />  desired_capacity   = 1<br />  max_size           = 5<br />  min_size           = 1</p><br /><p>warm_pool {<br />    pool_state                  = \"Hibernated\"<br />    min_size                    = 1<br />    max_group_prepared_capacity = 10</p><br /><pre><code>instance_reuse_policy {<br />  reuse_on_scale_in = true<br />}<br /></code></pre><br /><p>}<br />}</p><br /><h3 id=\"auto-scaling-group-with-traffic-sources\">Auto Scaling group with Traffic Sources</h3><br /><p>terraform<br />resource \"aws_autoscaling_group\" \"test\" {<br />  vpc_zone_identifier = aws_subnet.test.id<br />  max_size            = 1<br />  min_size            = 1</p><br /><p>force_delete = true<br />  dynamic \"traffic_source\" {<br />    for_each = aws_vpclattice_target_group.test[*]<br />    content {<br />      identifier = traffic_source.value.arn<br />      type       = \"vpc-lattice\"<br />    }<br />  }</p><br /><p>}</p><br />", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>name</code> - (Optional) Name of the Auto Scaling Group. By default generated by Terraform. Conflicts with <code>name_prefix</code>.</li><li><code>name_prefix</code> - (Optional) Creates a unique name beginning with the specified<br />  prefix. Conflicts with <code>name</code>.</li><li><code>max_size</code> - (Required) Maximum size of the Auto Scaling Group.</li><li><code>min_size</code> - (Required) Minimum size of the Auto Scaling Group.<br />  (See also <a href=\"#waiting-for-capacity\">Waiting for Capacity</a> below.)</li><li><code>availability_zones</code> - (Optional) A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the <code>vpc_zone_identifier</code> attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with <code>vpc_zone_identifier</code>.</li><li><code>capacity_rebalance</code> - (Optional) Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.</li><li><code>context</code> - (Optional) Reserved.</li><li><code>default_cooldown</code> - (Optional) Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.</li><li><code>default_instance_warmup</code> - (Optional) Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\">Set the default instance warmup for an Auto Scaling group</a>)</li><li><code>launch_configuration</code> - (Optional) Name of the launch configuration to use.</li><li><code>launch_template</code> - (Optional) Nested argument with Launch template specification to use to launch instances. See <a href=\"#launch_template\">Launch Template</a> below for more details.</li><li><code>mixed_instances_policy</code> - (Optional) Configuration block containing settings to define launch targets for Auto Scaling groups. See <a href=\"#mixed_instances_policy\">Mixed Instances Policy</a> below for more details.</li><li><code>ignore_failed_scaling_activities</code> - (Optional) Whether to ignore failed <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\">Auto Scaling scaling activities</a> while <a href=\"#waiting-for-capacity\">waiting for capacity</a>. The default is <code>false</code> -- failed scaling activities cause errors to be returned.</li><li><code>initial_lifecycle_hook</code> - (Optional) One or more<br /><a href=\"http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html\">Lifecycle Hooks</a><br />  to attach to the Auto Scaling Group <strong>before</strong> instances are launched. The<br />  syntax is exactly the same as the separate<br /><a href=\"/docs/providers/aws/r/autoscaling_lifecycle_hook.html\"><code>aws_autoscaling_lifecycle_hook</code></a><br />  resource, without the <code>autoscaling_group_name</code> attribute. Please note that this will only work when creating<br />  a new Auto Scaling Group. For all other use-cases, please use <code>aws_autoscaling_lifecycle_hook</code> resource.</li><li><code>health_check_grace_period</code> - (Optional, Default: 300) Time (in seconds) after instance comes into service before checking health.</li><li><code>health_check_type</code> - (Optional) \"EC2\" or \"ELB\". Controls how health checking is done.</li><li><code>desired_capacity</code> - (Optional) Number of Amazon EC2 instances that<br />  should be running in the group. (See also <a href=\"#waiting-for-capacity\">Waiting for<br />  Capacity</a> below.)</li><li><code>desired_capacity_type</code> - (Optional) The unit of measurement for the value specified for <code>desired_capacity</code>. Supported for attribute-based instance type selection only. Valid values: <code>\"units\"</code>, <code>\"vcpu\"</code>, <code>\"memory-mib\"</code>.</li><li><code>force_delete</code> - (Optional) Allows deleting the Auto Scaling Group without waiting<br />  for all instances in the pool to terminate. You can force an Auto Scaling Group to delete<br />  even if it's in the process of scaling a resource. Normally, Terraform<br />  drains all the instances before deleting the group. This bypasses that<br />  behavior and potentially leaves resources dangling.</li><li><code>load_balancers</code> - (Optional) List of elastic load balancer names to add to the autoscaling<br />  group names. Only valid for classic load balancers. For ALBs, use <code>target_group_arns</code> instead. To remove all load balancer attachments an empty list should be specified.</li><li><code>traffic_source</code> - (Optional) Attaches one or more traffic sources to the specified Auto Scaling group.</li><li><code>vpc_zone_identifier</code> - (Optional) List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with <code>availability_zones</code>.</li><li><code>target_group_arns</code> - (Optional) Set of <code>aws_alb_target_group</code> ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.</li><li><code>termination_policies</code> - (Optional) List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are <code>OldestInstance</code>, <code>NewestInstance</code>, <code>OldestLaunchConfiguration</code>, <code>ClosestToNextInstanceHour</code>, <code>OldestLaunchTemplate</code>, <code>AllocationStrategy</code>, <code>Default</code>. Additionally, the ARN of a Lambda function can be specified for custom termination policies.</li><li><code>suspended_processes</code> - (Optional) List of processes to suspend for the Auto Scaling Group. The allowed values are <code>Launch</code>, <code>Terminate</code>, <code>HealthCheck</code>, <code>ReplaceUnhealthy</code>, <code>AZRebalance</code>, <code>AlarmNotification</code>, <code>ScheduledActions</code>, <code>AddToLoadBalancer</code>, <code>InstanceRefresh</code>.<br />  Note that if you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent your Auto Scaling Group from functioning properly.</li><li><code>tag</code> - (Optional) Configuration block(s) containing resource tags. See <a href=\"#tag\">Tag</a> below for more details.</li><li><code>placement_group</code> - (Optional) Name of the placement group into which you'll launch your instances, if any.</li><li><code>metrics_granularity</code> - (Optional) Granularity to associate with the metrics to collect. The only valid value is <code>1Minute</code>. Default is <code>1Minute</code>.</li><li><code>enabled_metrics</code> - (Optional) List of metrics to collect. The allowed values are defined by the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html\">underlying AWS API</a>.</li><li><code>wait_for_capacity_timeout</code> - (Optional, Default: \"10m\") Maximum<br /><a href=\"https://golang.org/pkg/time/#ParseDuration\">duration</a> that Terraform should<br />  wait for ASG instances to be healthy before timing out. (See also <a href=\"#waiting-for-capacity\">Waiting<br />  for Capacity</a> below.) Setting this to \"0\" causes<br />  Terraform to skip all Capacity Waiting behavior.</li><li><code>min_elb_capacity</code> - (Optional) Setting this causes Terraform to wait for<br />  this number of instances from this Auto Scaling Group to show up healthy in the<br />  ELB only on creation. Updates will not wait on ELB instance number changes.<br />  (See also <a href=\"#waiting-for-capacity\">Waiting for Capacity</a> below.)</li><li><code>wait_for_elb_capacity</code> - (Optional) Setting this will cause Terraform to wait<br />  for exactly this number of healthy instances from this Auto Scaling Group in<br />  all attached load balancers on both create and update operations. (Takes<br />  precedence over <code>min_elb_capacity</code> behavior.)<br />  (See also <a href=\"#waiting-for-capacity\">Waiting for Capacity</a> below.)</li><li><code>protect_from_scale_in</code> - (Optional) Whether newly launched instances<br />  are automatically protected from termination by Amazon EC2 Auto Scaling when<br />  scaling in. For more information about preventing instances from terminating<br />  on scale in, see <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\">Using instance scale-in protection</a><br />  in the Amazon EC2 Auto Scaling User Guide.</li><li><code>service_linked_role_arn</code> - (Optional) ARN of the service-linked role that the ASG will use to call other AWS services</li><li><code>max_instance_lifetime</code> - (Optional) Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.</li><li><code>instance_refresh</code> - (Optional) If this block is configured, start an<br /><a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\">Instance Refresh</a><br />  when this Auto Scaling Group is updated. Defined <a href=\"#instance_refresh\">below</a>.</li><li><code>warm_pool</code> - (Optional) If this block is configured, add a <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\">Warm Pool</a><br />  to the specified Auto Scaling group. Defined <a href=\"#warm_pool\">below</a></li></ul><h3 id=\"launch_template\">launch_template</h3><p>~&gt; <strong>NOTE:</strong> Either <code>id</code> or <code>name</code> must be specified.</p><p>The top-level <code>launch_template</code> block supports the following:</p><ul><li><code>id</code> - (Optional) ID of the launch template. Conflicts with <code>name</code>.</li><li><code>name</code> - (Optional) Name of the launch template. Conflicts with <code>id</code>.</li><li><code>version</code> - (Optional) Template version. Can be version number, <code>$Latest</code>, or <code>$Default</code>. (Default: <code>$Default</code>).</li></ul><h3 id=\"mixed_instances_policy\">mixed_instances_policy</h3><ul><li><code>instances_distribution</code> - (Optional) Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.</li><li><code>launch_template</code> - (Required) Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.</li></ul><h4 id=\"mixed_instances_policy-instances_distribution\">mixed_instances_policy instances_distribution</h4><p>This configuration block supports the following:</p><ul><li><code>on_demand_allocation_strategy</code> - (Optional) Strategy to use when launching on-demand instances. Valid values: <code>prioritized</code>, <code>lowest-price</code>. Default: <code>prioritized</code>.</li><li><code>on_demand_base_capacity</code> - (Optional) Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: <code>0</code>.</li><li><code>on_demand_percentage_above_base_capacity</code> - (Optional) Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: <code>100</code>.</li><li><code>spot_allocation_strategy</code> - (Optional) How to allocate capacity across the Spot pools. Valid values: <code>lowest-price</code>, <code>capacity-optimized</code>, <code>capacity-optimized-prioritized</code>, and <code>price-capacity-optimized</code>. Default: <code>lowest-price</code>.</li><li><code>spot_instance_pools</code> - (Optional) Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with <code>spot_allocation_strategy</code> set to <code>lowest-price</code>. Otherwise it must be set to <code>0</code>, if it has been defined before. Default: <code>2</code>.</li><li><code>spot_max_price</code> - (Optional) Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.</li></ul><h4 id=\"mixed_instances_policy-launch_template\">mixed_instances_policy launch_template</h4><p>This configuration block supports the following:</p><ul><li><code>launch_template_specification</code> - (Required) Nested argument defines the Launch Template. Defined below.</li><li><code>override</code> - (Optional) List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.</li></ul><h5 id=\"mixed_instances_policy-launch_template-launch_template_specification\">mixed_instances_policy launch_template launch_template_specification</h5><p>~&gt; <strong>NOTE:</strong> Either <code>launch_template_id</code> or <code>launch_template_name</code> must be specified.</p><p>This configuration block supports the following:</p><ul><li><code>launch_template_id</code> - (Optional) ID of the launch template. Conflicts with <code>launch_template_name</code>.</li><li><code>launch_template_name</code> - (Optional) Name of the launch template. Conflicts with <code>launch_template_id</code>.</li><li><code>version</code> - (Optional) Template version. Can be version number, <code>$Latest</code>, or <code>$Default</code>. (Default: <code>$Default</code>).</li></ul><h5 id=\"mixed_instances_policy-launch_template-override\">mixed_instances_policy launch_template override</h5><p>This configuration block supports the following:</p><ul><li><code>instance_type</code> - (Optional) Override the instance type in the Launch Template.</li><li><code>instance_requirements</code> - (Optional) Override the instance type in the Launch Template with instance types that satisfy the requirements.</li><li><code>launch_template_specification</code> - (Optional) Override the instance launch template specification in the Launch Template.</li><li><code>weighted_capacity</code> - (Optional) Number of capacity units, which gives the instance type a proportional weight to other instance types.</li></ul><h6 id=\"mixed_instances_policy-launch_template-override-instance_requirements\">mixed_instances_policy launch_template override instance_requirements</h6><p>This configuration block supports the following:</p><p>~&gt; <strong>NOTE:</strong> Both <code>memory_mib.min</code> and <code>vcpu_count.min</code> must be specified.</p><ul><li><code>accelerator_count</code> - (Optional) Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum.</li><li><code>max</code> - (Optional) Maximum. Set to <code>0</code> to exclude instance types with accelerators.</li></ul></li><li><code>accelerator_manufacturers</code> - (Optional) List of accelerator manufacturer names. Default is any manufacturer.</li></ul><p>Valid names:<br />    * amazon-web-services<br />    * amd<br />    * nvidia<br />    * xilinx</p><ul><li><code>accelerator_names</code> - (Optional) List of accelerator names. Default is any acclerator.</li></ul><p>Valid names:<br />    * a100            - NVIDIA A100 GPUs<br />    * v100            - NVIDIA V100 GPUs<br />    * k80             - NVIDIA K80 GPUs<br />    * t4              - NVIDIA T4 GPUs<br />    * m60             - NVIDIA M60 GPUs<br />    * radeon-pro-v520 - AMD Radeon Pro V520 GPUs<br />    * vu9p            - Xilinx VU9P FPGAs</p><ul><li><p><code>accelerator_total_memory_mib</code> - (Optional) Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.</p><ul><li><code>min</code> - (Optional) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li><li><p><code>accelerator_types</code> - (Optional) List of accelerator types. Default is any accelerator type.</p></li></ul><p>Valid types:<br />    * fpga<br />    * gpu<br />    * inference</p><ul><li><code>allowed_instance_types</code> - (Optional) List of instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>, <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>. For example, if you specify <code>c5*</code>, you are allowing the entire C5 instance family, which includes all C5a and C5n instance types. If you specify <code>m5a.*</code>, you are allowing all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is all instance types.</li></ul><p>~&gt; <strong>NOTE:</strong> If you specify <code>allowed_instance_types</code>, you can't specify <code>excluded_instance_types</code>.</p><ul><li><code>bare_metal</code> - (Optional) Indicate whether bare metal instace types should be <code>included</code>, <code>excluded</code>, or <code>required</code>. Default is <code>excluded</code>.</li><li><code>baseline_ebs_bandwidth_mbps</code> - (Optional) Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li><li><code>burstable_performance</code> - (Optional) Indicate whether burstable performance instance types should be <code>included</code>, <code>excluded</code>, or <code>required</code>. Default is <code>excluded</code>.</li><li><code>cpu_manufacturers</code> (Optional) List of CPU manufacturer names. Default is any manufacturer.</li></ul><p>~&gt; <strong>NOTE:</strong> Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.</p><p>Valid names:<br />    * amazon-web-services<br />    * amd<br />    * intel</p><ul><li><code>excluded_instance_types</code> - (Optional) List of instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance type, size, or generation. The following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>, <code>m5a.*</code>, <code>r*</code>, <code>*3*</code>. For example, if you specify <code>c5*</code>, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify <code>m5a.*</code>, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.</li></ul><p>~&gt; <strong>NOTE:</strong> If you specify <code>excluded_instance_types</code>, you can't specify <code>allowed_instance_types</code>.</p><ul><li><code>instance_generations</code> - (Optional) List of instance generation names. Default is any generation.</li></ul><p>Valid names:<br />    * current  - Recommended for best performance.<br />    * previous - For existing applications optimized for older instance types.</p><ul><li><code>local_storage</code> - (Optional) Indicate whether instance types with local storage volumes are <code>included</code>, <code>excluded</code>, or <code>required</code>. Default is <code>included</code>.</li><li><code>local_storage_types</code> - (Optional) List of local storage type names. Default any storage type.</li></ul><p>Value names:<br />    * hdd - hard disk drive<br />    * ssd - solid state drive</p><ul><li><code>memory_gib_per_vcpu</code> - (Optional) Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum. May be a decimal number, e.g. <code>0.5</code>.</li><li><code>max</code> - (Optional) Maximum. May be a decimal number, e.g. <code>0.5</code>.</li></ul></li><li><code>memory_mib</code> - (Required) Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.<ul><li><code>min</code> - (Required) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li><li><code>network_bandwidth_gbps</code> - (Optional) Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li><li><code>network_interface_count</code> - (Optional) Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li><li><code>on_demand_max_price_percentage_over_lowest_price</code> - (Optional) Price protection threshold for On-Demand Instances. This is the maximum you\u2019ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.</li></ul><p>If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price.</p><ul><li><code>require_hibernate_support</code> - (Optional) Indicate whether instance types must support On-Demand Instance Hibernation, either <code>true</code> or <code>false</code>. Default is <code>false</code>.</li><li><code>spot_max_price_percentage_over_lowest_price</code> - (Optional) Price protection threshold for Spot Instances. This is the maximum you\u2019ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100.</li></ul><p>If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price.</p><ul><li><code>total_local_storage_gb</code> - (Optional) Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.<ul><li><code>min</code> - (Optional) Minimum. May be a decimal number, e.g. <code>0.5</code>.</li><li><code>max</code> - (Optional) Maximum. May be a decimal number, e.g. <code>0.5</code>.</li></ul></li><li><code>vcpu_count</code> - (Required) Block describing the minimum and maximum number of vCPUs. Default is no maximum.<ul><li><code>min</code> - (Required) Minimum.</li><li><code>max</code> - (Optional) Maximum.</li></ul></li></ul><h3 id=\"tag\">tag</h3><p>The <code>tag</code> attribute accepts exactly one tag declaration with the following fields:</p><ul><li><code>key</code> - (Required) Key</li><li><code>value</code> - (Required) Value</li><li><code>propagate_at_launch</code> - (Required) Enables propagation of the tag to<br />  Amazon EC2 instances launched via this ASG</li></ul><p>To declare multiple tags, additional <code>tag</code> blocks can be specified.</p><p>~&gt; <strong>NOTE:</strong> Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the <code>AmazonECSManaged</code> tag. These generally should be included in the configuration so Terraform does not attempt to remove them and so if the <code>min_size</code> was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.</p><h3 id=\"instance_refresh\">instance_refresh</h3><p>This configuration block supports the following:</p><ul><li><code>strategy</code> - (Required) Strategy to use for instance refresh. The only allowed value is <code>Rolling</code>. See <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_StartInstanceRefresh.html#API_StartInstanceRefresh_RequestParameters\">StartInstanceRefresh Action</a> for more information.</li><li><code>preferences</code> - (Optional) Override default parameters for Instance Refresh.<ul><li><code>checkpoint_delay</code> - (Optional) Number of seconds to wait after a checkpoint. Defaults to <code>3600</code>.</li><li><code>checkpoint_percentages</code> - (Optional) List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be <code>100</code>.</li><li><code>instance_warmup</code> - (Optional) Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.</li><li><code>min_healthy_percentage</code> - (Optional) Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to <code>90</code>.</li><li><code>skip_matching</code> - (Optional) Replace instances that already have your desired configuration. Defaults to <code>false</code>.</li><li><code>auto_rollback</code> - (Optional) Automatically rollback if instance refresh fails. Defaults to <code>false</code>. This option may only be set to <code>true</code> when specifying a <code>launch_template</code> or <code>mixed_instances_policy</code>.</li><li><code>scale_in_protected_instances</code> - (Optional) Behavior when encountering instances protected from scale in are found. Available behaviors are <code>Refresh</code>, <code>Ignore</code>, and <code>Wait</code>. Default is <code>Ignore</code>.</li><li><code>standby_instances</code> - (Optional) Behavior when encountering instances in the <code>Standby</code> state in are found. Available behaviors are <code>Terminate</code>, <code>Ignore</code>, and <code>Wait</code>. Default is <code>Ignore</code>.</li></ul></li><li><code>triggers</code> - (Optional) Set of additional property names that will trigger an Instance Refresh. A refresh will always be triggered by a change in any of <code>launch_configuration</code>, <code>launch_template</code>, or <code>mixed_instances_policy</code>.</li></ul><p>~&gt; <strong>NOTE:</strong> A refresh is started when any of the following Auto Scaling Group properties change: <code>launch_configuration</code>, <code>launch_template</code>, <code>mixed_instances_policy</code>. Additional properties can be specified in the <code>triggers</code> property of <code>instance_refresh</code>.</p><p>~&gt; <strong>NOTE:</strong> A refresh will not start when <code>version = \"$Latest\"</code> is configured in the <code>launch_template</code> block. To trigger the instance refresh when a launch template is changed, configure <code>version</code> to use the <code>latest_version</code> attribute of the <code>aws_launch_template</code> resource.</p><p>~&gt; <strong>NOTE:</strong> Auto Scaling Groups support up to one active instance refresh at a time. When this resource is updated, any existing refresh is cancelled.</p><p>~&gt; <strong>NOTE:</strong> Depending on health check settings and group size, an instance refresh may take a long time or fail. This resource does not wait for the instance refresh to complete.</p><h3 id=\"warm_pool\">warm_pool</h3><p>This configuration block supports the following:</p><ul><li><code>instance_reuse_policy</code> - (Optional) Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.</li><li><code>max_group_prepared_capacity</code> - (Optional) Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.</li><li><code>min_size</code> - (Optional) Minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.</li><li><code>pool_state</code> - (Optional) Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.</li></ul><h3 id=\"traffic_source\">traffic_source</h3><ul><li><code>identifier</code> - Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.</li><li><code>type</code> - Provides additional context for the value of Identifier.<br />  The following lists the valid values:<br /><code>elb</code> if <code>identifier</code> is the name of a Classic Load Balancer.<br /><code>elbv2</code> if <code>identifier</code> is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.<br /><code>vpc-lattice</code> if <code>identifier</code> is the ARN of a VPC Lattice target group.</li></ul><h5 id=\"instance_reuse_policy\">instance_reuse_policy</h5><p>This configuration block supports the following:</p><ul><li><code>reuse_on_scale_in</code> - (Optional) Whether instances in the Auto Scaling group can be returned to the warm pool on scale in.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - Auto Scaling Group id.</li><li><code>arn</code> - ARN for this Auto Scaling Group</li><li><code>availability_zones</code> - Availability zones of the Auto Scaling Group.</li><li><code>min_size</code> - Minimum size of the Auto Scaling Group</li><li><code>max_size</code> - Maximum size of the Auto Scaling Group</li><li><code>default_cooldown</code> - Time between a scaling activity and the succeeding scaling activity.</li><li><code>default_instance_warmup</code> - The duration of the default instance warmup, in seconds.</li><li><code>name</code> - Name of the Auto Scaling Group</li><li><code>health_check_grace_period</code> - Time after instance comes into service before checking health.</li><li><code>health_check_type</code> - \"EC2\" or \"ELB\". Controls how health checking is done.</li><li><code>desired_capacity</code> -The number of Amazon EC2 instances that should be running in the group.</li><li><code>launch_configuration</code> - The launch configuration of the Auto Scaling Group</li><li><code>predicted_capacity</code> - Predicted capacity of the group.</li><li><code>vpc_zone_identifier</code> (Optional) - The VPC zone identifier</li><li><code>warm_pool_size</code> - Current size of the warm pool.</li></ul><p>~&gt; <strong>NOTE:</strong> When using <code>ELB</code> as the <code>health_check_type</code>, <code>health_check_grace_period</code> is required.</p><p>~&gt; <strong>NOTE:</strong> Terraform has two types of ways you can add lifecycle hooks - via<br />the <code>initial_lifecycle_hook</code> attribute from this resource, or via the separate<br /><a href=\"/docs/providers/aws/r/autoscaling_lifecycle_hook.html\"><code>aws_autoscaling_lifecycle_hook</code></a><br />resource. <code>initial_lifecycle_hook</code> exists here because any lifecycle hooks<br />added with <code>aws_autoscaling_lifecycle_hook</code> will not be added until the<br />Auto Scaling Group has been created, and depending on your<br /><a href=\"#waiting-for-capacity\">capacity</a> settings, after the initial instances have<br />been launched, creating unintended behavior. If you need hooks to run on all<br />instances, add them with <code>initial_lifecycle_hook</code> here, but take<br />care to not duplicate these hooks in <code>aws_autoscaling_lifecycle_hook</code>.</p>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p><a href=\"https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts\">Configuration options</a>:</p><ul><li><code>delete</code> - (Default <code>10m</code>)</li></ul>", "waiting-for-capacity": "<h2 id=\"waiting-for-capacity\">Waiting for Capacity</h2><p>A newly-created ASG is initially empty and begins to scale to <code>min_size</code> (or<br /><code>desired_capacity</code>, if specified) by launching instances using the provided<br />Launch Configuration. These instances take time to launch and boot.</p><p>On ASG Update, changes to these values also take time to result in the target<br />number of instances providing service.</p><p>Terraform provides two mechanisms to help consistently manage ASG scale up<br />time across dependent resources.</p><h4 id=\"waiting-for-asg-capacity\">Waiting for ASG Capacity</h4><p>The first is default behavior. Terraform waits after ASG creation for<br /><code>min_size</code> (or <code>desired_capacity</code>, if specified) healthy instances to show up<br />in the ASG before continuing.</p><p>If <code>min_size</code> or <code>desired_capacity</code> are changed in a subsequent update,<br />Terraform will also wait for the correct number of healthy instances before<br />continuing.</p><p>Terraform considers an instance \"healthy\" when the ASG reports <code>HealthStatus:\"Healthy\"</code> and <code>LifecycleState: \"InService\"</code>. See the <a href=\"https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/AutoScalingGroupLifecycle.html\">AWS AutoScaling<br />Docs</a><br />for more information on an ASG's lifecycle.</p><p>Terraform will wait for healthy instances for up to<br /><code>wait_for_capacity_timeout</code>. If ASG creation is taking more than a few minutes,<br />it's worth investigating for scaling activity errors, which can be caused by<br />problems with the selected Launch Configuration.</p><p>Setting <code>wait_for_capacity_timeout</code> to <code>\"0\"</code> disables ASG Capacity waiting.</p><h4 id=\"waiting-for-elb-capacity\">Waiting for ELB Capacity</h4><p>The second mechanism is optional, and affects ASGs with attached ELBs specified<br />via the <code>load_balancers</code> attribute or with ALBs specified with <code>target_group_arns</code>.</p><p>The <code>min_elb_capacity</code> parameter causes Terraform to wait for at least the<br />requested number of instances to show up <code>\"InService\"</code> in all attached ELBs<br />during ASG creation. It has no effect on ASG updates.</p><p>If <code>wait_for_elb_capacity</code> is set, Terraform will wait for exactly that number<br />of Instances to be <code>\"InService\"</code> in all attached ELBs on both creation and<br />updates.</p><p>These parameters can be used to ensure that service is being provided before<br />Terraform moves on. If new instances don't pass the ELB's health checks for any<br />reason, the Terraform apply will time out, and the ASG will be marked as<br />tainted (i.e., marked to be destroyed in a follow up run).</p><p>As with ASG Capacity, Terraform will wait for up to <code>wait_for_capacity_timeout</code><br />for the proper number of instances to be healthy.</p><h4 id=\"troubleshooting-capacity-waiting-timeouts\">Troubleshooting Capacity Waiting Timeouts</h4><p>If ASG creation takes more than a few minutes, this could indicate one of a<br />number of configuration problems. See the <a href=\"https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-troubleshooting.html\">AWS Docs on Load Balancer<br />Troubleshooting</a><br />for more information.</p>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import Auto Scaling Groups using the <code>name</code>. For example:</p><p>terraform<br />import {<br />  to = aws_autoscaling_group.web<br />  id = \"web-asg\"<br />}</p><p>Using <code>terraform import</code>, import Auto Scaling Groups using the <code>name</code>. For example:</p><p>console<br />% terraform import aws_autoscaling_group.web web-asg</p>", "description": "<h1 id=\"resource-aws_autoscaling_group\">Resource: aws_autoscaling_group</h1><p>Provides an Auto Scaling Group resource.</p><p>-&gt; <strong>Note:</strong> You must specify either <code>launch_configuration</code>, <code>launch_template</code>, or <code>mixed_instances_policy</code>.</p><p>~&gt; <strong>NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:</strong> Terraform provides standalone <a href=\"autoscaling_attachment.html\">Attachment</a> (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and <a href=\"autoscaling_traffic_source_attachment.html\">Traffic Source Attachment</a> (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with <code>load_balancers</code>, <code>target_group_arns</code> and <code>traffic_source</code> attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html\"><code>lifecycle</code> configuration block</a> can be used to suppress differences if necessary.</p><blockquote><p><strong>Hands-on:</strong> Try the <a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-asg?utm_source=WEBSITE&amp;utm_medium=WEB_IO&amp;utm_offer=ARTICLE_PAGE&amp;utm_content=DOCS\">Manage AWS Auto Scaling Groups</a> tutorial on HashiCorp Learn.</p></blockquote>"}