{"resource-aws-appsync-resolver": "<h1 id=\"resource-aws_appsync_resolver\">Resource: aws_appsync_resolver</h1><p>Provides an AppSync Resolver.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p>terraform<br />resource \"aws_appsync_graphql_api\" \"test\" {<br />  authentication_type = \"API_KEY\"<br />  name                = \"tf-example\"</p><br /><p>schema = &lt;&lt;EOF<br />type Mutation {<br />    putPost(id: ID!, title: String!): Post<br />}</p><br /><p>type Post {<br />    id: ID!<br />    title: String!<br />}</p><br /><p>type Query {<br />    singlePost(id: ID!): Post<br />}</p><br /><p>schema {<br />    query: Query<br />    mutation: Mutation<br />}<br />EOF<br />}</p><br /><p>resource \"aws_appsync_datasource\" \"test\" {<br />  api_id = aws_appsync_graphql_api.test.id<br />  name   = \"tf_example\"<br />  type   = \"HTTP\"</p><br /><p>http_config {<br />    endpoint = \"http://example.com\"<br />  }<br />}</p><br />", "unit-type-resolver-default": "<h1 id=\"unit-type-resolver-default\">UNIT type resolver (default)</h1><p>resource \"aws_appsync_resolver\" \"test\" {<br />  api_id      = aws_appsync_graphql_api.test.id<br />  field       = \"singlePost\"<br />  type        = \"Query\"<br />  data_source = aws_appsync_datasource.test.name</p><p>request_template = &lt;&lt;EOF<br />{<br />    \"version\": \"2018-05-29\",<br />    \"method\": \"GET\",<br />    \"resourcePath\": \"/\",<br />    \"params\":{<br />        \"headers\": $utils.http.copyheaders($ctx.request.headers)<br />    }<br />}<br />EOF</p><p>response_template = &lt;&lt;EOF</p>", "if-ctx-result-statuscode-200": "<h1 id=\"ifctxresultstatuscode-200\">if($ctx.result.statusCode == 200)</h1><pre><code>$ctx.result.body</code></pre>", "else": "<h1 id=\"else\">else</h1><pre><code>$utils.appendError($ctx.result.body, $ctx.result.statusCode)</code></pre>", "end": "<h1 id=\"end\">end</h1><p>EOF</p><p>caching_config {<br />    caching_keys = [<br />      \"$context.identity.sub\",<br />      \"$context.arguments.id\",<br />    ]<br />    ttl = 60<br />  }<br />}</p>", "pipeline-type-resolver": "<h1 id=\"pipeline-type-resolver\">PIPELINE type resolver</h1><p>resource \"aws_appsync_resolver\" \"Mutation_pipelineTest\" {<br />  type              = \"Mutation\"<br />  api_id            = aws_appsync_graphql_api.test.id<br />  field             = \"pipelineTest\"<br />  request_template  = \"{}\"<br />  response_template = \"$util.toJson($ctx.result)\"<br />  kind              = \"PIPELINE\"<br />  pipeline_config {<br />    functions = [<br />      aws_appsync_function.test1.function_id,<br />      aws_appsync_function.test2.function_id,<br />      aws_appsync_function.test3.function_id,<br />    ]<br />  }<br />}</p>", "example-usage-js": "<h2 id=\"example-usage-js\">Example Usage JS</h2><p>terraform<br />resource \"aws_appsync_resolver\" \"example\" {<br />  type   = \"Query\"<br />  api_id = aws_appsync_graphql_api.test.id<br />  field  = \"pipelineTest\"<br />  kind   = \"PIPELINE\"<br />  code   = file(\"some-code-dir\")</p><p>runtime {<br />    name            = \"APPSYNC_JS\"<br />    runtime_version = \"1.0.0\"<br />  }</p><p>pipeline_config {<br />    functions = [<br />      aws_appsync_function.test.function_id,<br />    ]<br />  }<br />}</p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>api_id</code> - (Required) API ID for the GraphQL API.</li><li><code>code</code> - (Optional) The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.</li><li><code>type</code> - (Required) Type name from the schema defined in the GraphQL API.</li><li><code>field</code> - (Required) Field name from the schema defined in the GraphQL API.</li><li><code>request_template</code> - (Optional) Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.</li><li><code>response_template</code> - (Optional) Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.</li><li><code>data_source</code> - (Optional) Data source name.</li><li><code>max_batch_size</code> - (Optional) Maximum batching size for a resolver. Valid values are between <code>0</code> and <code>2000</code>.</li><li><code>kind</code>  - (Optional) Resolver type. Valid values are <code>UNIT</code> and <code>PIPELINE</code>.</li><li><code>sync_config</code> - (Optional) Describes a Sync configuration for a resolver. See <a href=\"#sync-config\">Sync Config</a>.</li><li><code>pipeline_config</code> - (Optional) The caching configuration for the resolver. See <a href=\"#pipeline-config\">Pipeline Config</a>.</li><li><code>caching_config</code> - (Optional) The Caching Config. See <a href=\"#caching-config\">Caching Config</a>.</li><li><code>runtime</code> - (Optional) Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See <a href=\"#runtime\">Runtime</a>.</li></ul><h3 id=\"caching-config\">Caching Config</h3><ul><li><code>caching_keys</code> - (Optional) The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.</li><li><code>ttl</code> - (Optional) The TTL in seconds for a resolver that has caching activated. Valid values are between <code>1</code> and <code>3600</code> seconds.</li></ul><h3 id=\"pipeline-config\">Pipeline Config</h3><ul><li><code>functions</code> - (Optional) A list of Function objects.</li></ul><h3 id=\"sync-config\">Sync Config</h3><ul><li><code>conflict_detection</code> - (Optional) Conflict Detection strategy to use. Valid values are <code>NONE</code> and <code>VERSION</code>.</li><li><code>conflict_handler</code> - (Optional) Conflict Resolution strategy to perform in the event of a conflict. Valid values are <code>NONE</code>, <code>OPTIMISTIC_CONCURRENCY</code>, <code>AUTOMERGE</code>, and <code>LAMBDA</code>.</li><li><code>lambda_conflict_handler_config</code> - (Optional) Lambda Conflict Handler Config when configuring <code>LAMBDA</code> as the Conflict Handler. See <a href=\"#lambda-conflict-handler-config\">Lambda Conflict Handler Config</a>.</li></ul><h4 id=\"lambda-conflict-handler-config\">Lambda Conflict Handler Config</h4><ul><li><code>lambda_conflict_handler_arn</code> - (Optional) ARN for the Lambda function to use as the Conflict Handler.</li></ul><h3 id=\"runtime\">Runtime</h3><ul><li><code>name</code> - (Optional) The name of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.</li><li><code>runtime_version</code> - (Optional) The version of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>arn</code> - ARN</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import <code>aws_appsync_resolver</code> using the <code>api_id</code>, a hyphen, <code>type</code>, a hypen and <code>field</code>. For example:</p><p>terraform<br />import {<br />  to = aws_appsync_resolver.example<br />  id = \"abcdef123456-exampleType-exampleField\"<br />}</p><p>Using <code>terraform import</code>, import <code>aws_appsync_resolver</code> using the <code>api_id</code>, a hyphen, <code>type</code>, a hypen and <code>field</code>. For example:</p><p>console<br />% terraform import aws_appsync_resolver.example abcdef123456-exampleType-exampleField</p>", "description": "<h1 id=\"resource-aws_appsync_resolver\">Resource: aws_appsync_resolver</h1><p>Provides an AppSync Resolver.</p>"}