{"resource-aws-s3-bucket-notification": "<h1 id=\"resource-aws_s3_bucket_notification\">Resource: aws_s3_bucket_notification</h1><p>Manages a S3 Bucket Notification Configuration. For additional information, see the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring S3 Event Notifications section in the Amazon S3 Developer Guide</a>.</p><p>~&gt; <strong>NOTE:</strong> S3 Buckets only support a single notification configuration. Declaring multiple <code>aws_s3_bucket_notification</code> resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example \"Trigger multiple Lambda functions\" for an option.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"add-notification-configuration-to-sns-topic\">Add notification configuration to SNS Topic</h3><p>terraform<br />data \"aws_iam_policy_document\" \"topic\" {<br />  statement {<br />    effect = \"Allow\"</p><pre><code>principals {  type        = \"Service\"  identifiers = [\"s3.amazonaws.com\"]}actions   = [\"SNS:Publish\"]resources = [\"arn:aws:sns:*:*:s3-event-notification-topic\"]condition {  test     = \"ArnLike\"  variable = \"aws:SourceArn\"  values   = [aws_s3_bucket.bucket.arn]}</code></pre><p>}<br />}<br />resource \"aws_sns_topic\" \"topic\" {<br />  name   = \"s3-event-notification-topic\"<br />  policy = data.aws_iam_policy_document.topic.json<br />}</p><p>resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket = aws_s3_bucket.bucket.id</p><p>topic {<br />    topic_arn     = aws_sns_topic.topic.arn<br />    events        = [\"s3:ObjectCreated:*\"]<br />    filter_suffix = \".log\"<br />  }<br />}<br /></p><h3 id=\"add-notification-configuration-to-sqs-queue\">Add notification configuration to SQS Queue</h3><p>terraform<br />data \"aws_iam_policy_document\" \"queue\" {<br />  statement {<br />    effect = \"Allow\"</p><pre><code>principals {  type        = \"*\"  identifiers = [\"*\"]}actions   = [\"sqs:SendMessage\"]resources = [\"arn:aws:sqs:*:*:s3-event-notification-queue\"]condition {  test     = \"ArnEquals\"  variable = \"aws:SourceArn\"  values   = [aws_s3_bucket.bucket.arn]}</code></pre><p>}<br />}</p><p>resource \"aws_sqs_queue\" \"queue\" {<br />  name   = \"s3-event-notification-queue\"<br />  policy = data.aws_iam_policy_document.queue.json<br />}</p><p>resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket = aws_s3_bucket.bucket.id</p><p>queue {<br />    queue_arn     = aws_sqs_queue.queue.arn<br />    events        = [\"s3:ObjectCreated:*\"]<br />    filter_suffix = \".log\"<br />  }<br />}<br /></p><h3 id=\"add-notification-configuration-to-lambda-function\">Add notification configuration to Lambda Function</h3><p>terraform<br />data \"aws_iam_policy_document\" \"assume_role\" {<br />  statement {<br />    effect = \"Allow\"</p><pre><code>principals {  type        = \"Service\"  identifiers = [\"lambda.amazonaws.com\"]}actions = [\"sts:AssumeRole\"]</code></pre><p>}<br />}</p><p>resource \"aws_iam_role\" \"iam_for_lambda\" {<br />  name               = \"iam_for_lambda\"<br />  assume_role_policy = data.aws_iam_policy_document.assume_role.json<br />}</p><p>resource \"aws_lambda_permission\" \"allow_bucket\" {<br />  statement_id  = \"AllowExecutionFromS3Bucket\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.func.arn<br />  principal     = \"s3.amazonaws.com\"<br />  source_arn    = aws_s3_bucket.bucket.arn<br />}</p><p>resource \"aws_lambda_function\" \"func\" {<br />  filename      = \"your-function.zip\"<br />  function_name = \"example_lambda_name\"<br />  role          = aws_iam_role.iam_for_lambda.arn<br />  handler       = \"exports.example\"<br />  runtime       = \"go1.x\"<br />}</p><p>resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket = aws_s3_bucket.bucket.id</p><p>lambda_function {<br />    lambda_function_arn = aws_lambda_function.func.arn<br />    events              = [\"s3:ObjectCreated:*\"]<br />    filter_prefix       = \"AWSLogs/\"<br />    filter_suffix       = \".log\"<br />  }</p><p>depends_on = [aws_lambda_permission.allow_bucket]<br />}<br /></p><h3 id=\"trigger-multiple-lambda-functions\">Trigger multiple Lambda functions</h3><p>terraform<br />data \"aws_iam_policy_document\" \"assume_role\" {<br />  effect = \"Allow\"</p><p>principals {<br />    type        = \"Service\"<br />    identifiers = [\"lambda.amazonaws.com\"]<br />  }</p><p>actions = [\"sts:AssumeRole\"]<br />}</p><p>resource \"aws_iam_role\" \"iam_for_lambda\" {<br />  name               = \"iam_for_lambda\"<br />  assume_role_policy = data.aws_iam_policy_document.assume_role.json<br />}</p><p>resource \"aws_lambda_permission\" \"allow_bucket1\" {<br />  statement_id  = \"AllowExecutionFromS3Bucket1\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.func1.arn<br />  principal     = \"s3.amazonaws.com\"<br />  source_arn    = aws_s3_bucket.bucket.arn<br />}</p><p>resource \"aws_lambda_function\" \"func1\" {<br />  filename      = \"your-function1.zip\"<br />  function_name = \"example_lambda_name1\"<br />  role          = aws_iam_role.iam_for_lambda.arn<br />  handler       = \"exports.example\"<br />  runtime       = \"go1.x\"<br />}</p><p>resource \"aws_lambda_permission\" \"allow_bucket2\" {<br />  statement_id  = \"AllowExecutionFromS3Bucket2\"<br />  action        = \"lambda:InvokeFunction\"<br />  function_name = aws_lambda_function.func2.arn<br />  principal     = \"s3.amazonaws.com\"<br />  source_arn    = aws_s3_bucket.bucket.arn<br />}</p><p>resource \"aws_lambda_function\" \"func2\" {<br />  filename      = \"your-function2.zip\"<br />  function_name = \"example_lambda_name2\"<br />  role          = aws_iam_role.iam_for_lambda.arn<br />  handler       = \"exports.example\"<br />}</p><p>resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket = aws_s3_bucket.bucket.id</p><p>lambda_function {<br />    lambda_function_arn = aws_lambda_function.func1.arn<br />    events              = [\"s3:ObjectCreated:*\"]<br />    filter_prefix       = \"AWSLogs/\"<br />    filter_suffix       = \".log\"<br />  }</p><p>lambda_function {<br />    lambda_function_arn = aws_lambda_function.func2.arn<br />    events              = [\"s3:ObjectCreated:*\"]<br />    filter_prefix       = \"OtherLogs/\"<br />    filter_suffix       = \".log\"<br />  }</p><p>depends_on = [<br />    aws_lambda_permission.allow_bucket1,<br />    aws_lambda_permission.allow_bucket2,<br />  ]<br />}<br /></p><h3 id=\"add-multiple-notification-configurations-to-sqs-queue\">Add multiple notification configurations to SQS Queue</h3><p>terraform<br />data \"aws_iam_policy_document\" \"queue\" {<br />  statement {<br />    effect = \"Allow\"</p><pre><code>principals {  type        = \"*\"  identifiers = [\"*\"]}actions   = [\"sqs:SendMessage\"]resources = [\"arn:aws:sqs:*:*:s3-event-notification-queue\"]condition {  test     = \"ArnEquals\"  variable = \"aws:SourceArn\"  values   = [aws_s3_bucket.bucket.arn]}</code></pre><p>}<br />}</p><p>resource \"aws_sqs_queue\" \"queue\" {<br />  name   = \"s3-event-notification-queue\"<br />  policy = data.aws_iam_policy_document.queue.json<br />}</p><p>resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket = aws_s3_bucket.bucket.id</p><p>queue {<br />    id            = \"image-upload-event\"<br />    queue_arn     = aws_sqs_queue.queue.arn<br />    events        = [\"s3:ObjectCreated:*\"]<br />    filter_prefix = \"images/\"<br />  }</p><p>queue {<br />    id            = \"video-upload-event\"<br />    queue_arn     = aws_sqs_queue.queue.arn<br />    events        = [\"s3:ObjectCreated:*\"]<br />    filter_prefix = \"videos/\"<br />  }<br />}<br /></p><p>For Terraform's <a href=\"https://www.terraform.io/docs/configuration/syntax.html\">JSON syntax</a>, use an array instead of defining the <code>queue</code> key twice.</p><p><code>json{    \"bucket\": \"${aws_s3_bucket.bucket.id}\",    \"queue\": [        {            \"id\": \"image-upload-event\",            \"queue_arn\": \"${aws_sqs_queue.queue.arn}\",            \"events\": [\"s3:ObjectCreated:*\"],            \"filter_prefix\": \"images/\"        },        {            \"id\": \"video-upload-event\",            \"queue_arn\": \"${aws_sqs_queue.queue.arn}\",            \"events\": [\"s3:ObjectCreated:*\"],            \"filter_prefix\": \"videos/\"        }    ]}</code></p><h3 id=\"emit-events-to-eventbridge\">Emit events to EventBridge</h3><p>terraform<br />resource \"aws_s3_bucket\" \"bucket\" {<br />  bucket = \"your-bucket-name\"<br />}</p><p>resource \"aws_s3_bucket_notification\" \"bucket_notification\" {<br />  bucket      = aws_s3_bucket.bucket.id<br />  eventbridge = true<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>The following arguments are required:</p><ul><li><code>bucket</code> - (Required) Name of the bucket for notification configuration.</li></ul><p>The following arguments are optional:</p><ul><li><code>eventbridge</code> - (Optional) Whether to enable Amazon EventBridge notifications. Defaults to <code>false</code>.</li><li><code>lambda_function</code> - (Optional, Multiple) Used to configure notifications to a Lambda Function. See below.</li><li><code>queue</code> - (Optional) Notification configuration to SQS Queue. See below.</li><li><code>topic</code> - (Optional) Notification configuration to SNS Topic. See below.</li></ul><h3 id=\"lambda_function\"><code>lambda_function</code></h3><ul><li><code>events</code> - (Required) <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations\">Event</a> for which to send notifications.</li><li><code>filter_prefix</code> - (Optional) Object key name prefix.</li><li><code>filter_suffix</code> - (Optional) Object key name suffix.</li><li><code>id</code> - (Optional) Unique identifier for each of the notification configurations.</li><li><code>lambda_function_arn</code> - (Required) Lambda function ARN.</li></ul><h3 id=\"queue\"><code>queue</code></h3><ul><li><code>events</code> - (Required) Specifies <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations\">event</a> for which to send notifications.</li><li><code>filter_prefix</code> - (Optional) Object key name prefix.</li><li><code>filter_suffix</code> - (Optional) Object key name suffix.</li><li><code>id</code> - (Optional) Unique identifier for each of the notification configurations.</li><li><code>queue_arn</code> - (Required) SQS queue ARN.</li></ul><h3 id=\"topic\"><code>topic</code></h3><ul><li><code>events</code> - (Required) <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations\">Event</a> for which to send notifications.</li><li><code>filter_prefix</code> - (Optional) Object key name prefix.</li><li><code>filter_suffix</code> - (Optional) Object key name suffix.</li><li><code>id</code> - (Optional) Unique identifier for each of the notification configurations.</li><li><code>topic_arn</code> - (Required) SNS topic ARN.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports no additional attributes.</p>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import S3 bucket notification using the <code>bucket</code>. For example:</p><p><code>terraformimport {  to = aws_s3_bucket_notification.bucket_notification  id = \"bucket-name\"}</code></p><p>Using <code>terraform import</code>, import S3 bucket notification using the <code>bucket</code>. For example:</p><p><code>console% terraform import aws_s3_bucket_notification.bucket_notification bucket-name</code></p>", "description": "<h1 id=\"resource-aws_s3_bucket_notification\">Resource: aws_s3_bucket_notification</h1><p>Manages a S3 Bucket Notification Configuration. For additional information, see the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring S3 Event Notifications section in the Amazon S3 Developer Guide</a>.</p><p>~&gt; <strong>NOTE:</strong> S3 Buckets only support a single notification configuration. Declaring multiple <code>aws_s3_bucket_notification</code> resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example \"Trigger multiple Lambda functions\" for an option.</p>"}