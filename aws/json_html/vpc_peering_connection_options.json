{"resource-aws-vpc-peering-connection-options": "<h1 id=\"resource-aws_vpc_peering_connection_options\">Resource: aws_vpc_peering_connection_options</h1><p>Provides a resource to manage VPC peering connection options.</p><p>~&gt; <strong>NOTE on VPC Peering Connections and VPC Peering Connection Options:</strong> Terraform provides<br />both a standalone VPC Peering Connection Options and a <a href=\"vpc_peering_connection.html\">VPC Peering Connection</a><br />resource with <code>accepter</code> and <code>requester</code> attributes. Do not manage options for the same VPC peering<br />connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.<br />Doing so will cause a conflict of options and will overwrite the options.<br />Using a VPC Peering Connection Options resource decouples management of the connection options from<br />management of the VPC Peering Connection and allows options to be set correctly in cross-region and<br />cross-account scenarios.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><h3 id=\"basic-usage\">Basic Usage</h3><p>terraform<br />resource \"aws_vpc\" \"foo\" {<br />  cidr_block = \"10.0.0.0/16\"<br />}</p><p>resource \"aws_vpc\" \"bar\" {<br />  cidr_block = \"10.1.0.0/16\"<br />}</p><p>resource \"aws_vpc_peering_connection\" \"foo\" {<br />  vpc_id      = aws_vpc.foo.id<br />  peer_vpc_id = aws_vpc.bar.id<br />  auto_accept = true<br />}</p><p>resource \"aws_vpc_peering_connection_options\" \"foo\" {<br />  vpc_peering_connection_id = aws_vpc_peering_connection.foo.id</p><p>accepter {<br />    allow_remote_vpc_dns_resolution = true<br />  }<br />}<br /></p><h3 id=\"cross-account-usage\">Cross-Account Usage</h3><p>terraform<br />provider \"aws\" {<br />  alias = \"requester\"</p><p># Requester's credentials.<br />}</p><p>provider \"aws\" {<br />  alias = \"accepter\"</p><p># Accepter's credentials.<br />}</p><p>resource \"aws_vpc\" \"main\" {<br />  provider = aws.requester</p><p>cidr_block = \"10.0.0.0/16\"</p><p>enable_dns_support   = true<br />  enable_dns_hostnames = true<br />}</p><p>resource \"aws_vpc\" \"peer\" {<br />  provider = aws.accepter</p><p>cidr_block = \"10.1.0.0/16\"</p><p>enable_dns_support   = true<br />  enable_dns_hostnames = true<br />}</p><p>data \"aws_caller_identity\" \"peer\" {<br />  provider = aws.accepter<br />}</p>", "requester-s-side-of-the-connection": "<h1 id=\"requesters-side-of-the-connection\">Requester's side of the connection.</h1><p>resource \"aws_vpc_peering_connection\" \"peer\" {<br />  provider = aws.requester</p><p>vpc_id        = aws_vpc.main.id<br />  peer_vpc_id   = aws_vpc.peer.id<br />  peer_owner_id = data.aws_caller_identity.peer.account_id<br />  auto_accept   = false</p><p>tags = {<br />    Side = \"Requester\"<br />  }<br />}</p>", "accepter-s-side-of-the-connection": "<h1 id=\"accepters-side-of-the-connection\">Accepter's side of the connection.</h1><p>resource \"aws_vpc_peering_connection_accepter\" \"peer\" {<br />  provider = aws.accepter</p><p>vpc_peering_connection_id = aws_vpc_peering_connection.peer.id<br />  auto_accept               = true</p><p>tags = {<br />    Side = \"Accepter\"<br />  }<br />}</p><p>resource \"aws_vpc_peering_connection_options\" \"requester\" {<br />  provider = aws.requester</p><p># As options can't be set until the connection has been accepted<br />  # create an explicit dependency on the accepter.<br />  vpc_peering_connection_id = aws_vpc_peering_connection_accepter.peer.id</p><p>requester {<br />    allow_remote_vpc_dns_resolution = true<br />  }<br />}</p><p>resource \"aws_vpc_peering_connection_options\" \"accepter\" {<br />  provider = aws.accepter</p><p>vpc_peering_connection_id = aws_vpc_peering_connection_accepter.peer.id</p><p>accepter {<br />    allow_remote_vpc_dns_resolution = true<br />  }<br />}<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>This resource supports the following arguments:</p><ul><li><code>vpc_peering_connection_id</code> - (Required) The ID of the requester VPC peering connection.</li><li><code>accepter</code> (Optional) - An optional configuration block that allows for <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">VPC Peering Connection</a> options to be set for the VPC that acceptsthe peering connection (a maximum of one).</li><li><code>requester</code> (Optional) - A optional configuration block that allows for <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">VPC Peering Connection</a> options to be set for the VPC that requeststhe peering connection (a maximum of one).</li></ul><h4 id=\"accepter-and-requester-arguments\">Accepter and Requester Arguments</h4><p>-&gt; <strong>Note:</strong> When enabled, the DNS resolution feature requires that VPCs participating in the peering must have support for the DNS hostnames enabled. This can be done using the <a href=\"vpc.html#enable_dns_hostnames\"><code>enable_dns_hostnames</code></a> attribute in the <a href=\"vpc.html\"><code>aws_vpc</code></a> resource. See <a href=\"http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html\">Using DNS with Your VPC</a> user guide for more information.</p><ul><li><code>allow_remote_vpc_dns_resolution</code> - (Optional) Allow a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</li></ul>", "attribute-reference": "<h2 id=\"attribute-reference\">Attribute Reference</h2><p>This resource exports the following attributes in addition to the arguments above:</p><ul><li><code>id</code> - The ID of the VPC Peering Connection Options.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>In Terraform v1.5.0 and later, use an <a href=\"https://developer.hashicorp.com/terraform/language/import\"><code>import</code> block</a> to import VPC Peering Connection Options using the VPC peering <code>id</code>. For example:</p><p><code>terraformimport {  to = aws_vpc_peering_connection_options.foo  id = \"pcx-111aaa111\"}</code></p><p>Using <code>terraform import</code>, import VPC Peering Connection Options using the VPC peering <code>id</code>. For example:</p><p><code>console% terraform import aws_vpc_peering_connection_options.foo pcx-111aaa111</code></p>", "description": "<h1 id=\"resource-aws_vpc_peering_connection_options\">Resource: aws_vpc_peering_connection_options</h1><p>Provides a resource to manage VPC peering connection options.</p><p>~&gt; <strong>NOTE on VPC Peering Connections and VPC Peering Connection Options:</strong> Terraform provides<br />both a standalone VPC Peering Connection Options and a <a href=\"vpc_peering_connection.html\">VPC Peering Connection</a><br />resource with <code>accepter</code> and <code>requester</code> attributes. Do not manage options for the same VPC peering<br />connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.<br />Doing so will cause a conflict of options and will overwrite the options.<br />Using a VPC Peering Connection Options resource decouples management of the connection options from<br />management of the VPC Peering Connection and allows options to be set correctly in cross-region and<br />cross-account scenarios.</p>"}