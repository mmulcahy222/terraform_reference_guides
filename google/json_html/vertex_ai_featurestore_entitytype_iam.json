{"": "<h1 id=\"-_2\">----------------------------------------------------------------------------</h1><p>subcategory: \"Vertex AI\"<br />description: |-<br />  Collection of resources to manage IAM policy for Vertex AI FeaturestoreEntitytype</p><hr />", "auto-generated-code-type-mmv1": "<h1 id=\"auto-generated-code-type-mmv1\"><strong><em>     AUTO GENERATED CODE    </em></strong>    Type: MMv1     ***</h1>", "this-file-is-automatically-generated-by-magic-modules-and-manual": "<h1 id=\"this-file-is-automatically-generated-by-magic-modules-and-manual\">This file is automatically generated by Magic Modules and manual</h1>", "changes-will-be-clobbered-when-the-file-is-regenerated": "<h1 id=\"changes-will-be-clobbered-when-the-file-is-regenerated\">changes will be clobbered when the file is regenerated.</h1>", "please-read-more-about-how-to-change-this-file-in": "<h1 id=\"please-read-more-about-how-to-change-this-file-in\">Please read more about how to change this file in</h1>", "github-contributing-md": "<h1 id=\"githubcontributingmd\">.github/CONTRIBUTING.md.</h1>", "iam-policy-for-vertex-ai-featurestoreentitytype": "<h1 id=\"iam-policy-for-vertex-ai-featurestoreentitytype\">IAM policy for Vertex AI FeaturestoreEntitytype</h1><p>Three different resources help you manage your IAM policy for Vertex AI FeaturestoreEntitytype. Each of these resources serves a different use case:</p><ul><li><code>google_vertex_ai_featurestore_entitytype_iam_policy</code>: Authoritative. Sets the IAM policy for the featurestoreentitytype and replaces any existing policy already attached.</li><li><code>google_vertex_ai_featurestore_entitytype_iam_binding</code>: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the featurestoreentitytype are preserved.</li><li><code>google_vertex_ai_featurestore_entitytype_iam_member</code>: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the featurestoreentitytype are preserved.</li></ul><p>A data source can be used to retrieve policy data in advent you do not need creation</p><ul><li><code>google_vertex_ai_featurestore_entitytype_iam_policy</code>: Retrieves the IAM policy for the featurestoreentitytype</li></ul><p>~&gt; <strong>Note:</strong> <code>google_vertex_ai_featurestore_entitytype_iam_policy</code> <strong>cannot</strong> be used in conjunction with <code>google_vertex_ai_featurestore_entitytype_iam_binding</code> and <code>google_vertex_ai_featurestore_entitytype_iam_member</code> or they will fight over what your policy should be.</p><p>~&gt; <strong>Note:</strong> <code>google_vertex_ai_featurestore_entitytype_iam_binding</code> resources <strong>can be</strong> used in conjunction with <code>google_vertex_ai_featurestore_entitytype_iam_member</code> resources <strong>only if</strong> they do not grant privilege to the same role.</p><p>~&gt; <strong>Warning:</strong> This resource is in beta, and should be used with the terraform-provider-google-beta provider.<br />See <a href=\"https://terraform.io/docs/providers/google/guides/provider_versions.html\">Provider Versions</a> for more details on beta resources.</p>", "google-vertex-ai-featurestore-entitytype-iam-policy": "<h2 id=\"google_vertex_ai_featurestore_entitytype_iam_policy\">google_vertex_ai_featurestore_entitytype_iam_policy</h2><p>data \"google_iam_policy\" \"admin\" {<br />  binding {<br />    role = \"roles/viewer\"<br />    members = [<br />      \"user:jane@example.com\",<br />    ]<br />  }<br />}</p><p>resource \"google_vertex_ai_featurestore_entitytype_iam_policy\" \"policy\" {<br />  featurestore = google_vertex_ai_featurestore_entitytype.entity.featurestore<br />  entitytype = google_vertex_ai_featurestore_entitytype.entity.name<br />  policy_data = data.google_iam_policy.admin.policy_data<br />}</p>", "google-vertex-ai-featurestore-entitytype-iam-binding": "<h2 id=\"google_vertex_ai_featurestore_entitytype_iam_binding\">google_vertex_ai_featurestore_entitytype_iam_binding</h2><p>resource \"google_vertex_ai_featurestore_entitytype_iam_binding\" \"binding\" {<br />  featurestore = google_vertex_ai_featurestore_entitytype.entity.featurestore<br />  entitytype = google_vertex_ai_featurestore_entitytype.entity.name<br />  role = \"roles/viewer\"<br />  members = [<br />    \"user:jane@example.com\",<br />  ]<br />}</p>", "google-vertex-ai-featurestore-entitytype-iam-member": "<h2 id=\"google_vertex_ai_featurestore_entitytype_iam_member\">google_vertex_ai_featurestore_entitytype_iam_member</h2><p>resource \"google_vertex_ai_featurestore_entitytype_iam_member\" \"member\" {<br />  featurestore = google_vertex_ai_featurestore_entitytype.entity.featurestore<br />  entitytype = google_vertex_ai_featurestore_entitytype.entity.name<br />  role = \"roles/viewer\"<br />  member = \"user:jane@example.com\"<br />}</p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>The following arguments are supported:</p><ul><li><code>entitytype</code> - (Required) Used to find the parent resource to bind the IAM policy to</li><li><p><code>featurestore</code> - (Required) The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to</p></li><li><p><code>member/members</code> - (Required) Identities that will be granted the privilege in <code>role</code>.<br />  Each entry can have one of the following values:</p></li><li><strong>allUsers</strong>: A special identifier that represents anyone who is on the internet; with or without a Google account.</li><li><strong>allAuthenticatedUsers</strong>: A special identifier that represents anyone who is authenticated with a Google account or a service account.</li><li><strong>user:{emailid}</strong>: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.</li><li><strong>serviceAccount:{emailid}</strong>: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.</li><li><strong>group:{emailid}</strong>: An email address that represents a Google group. For example, admins@example.com.</li><li><strong>domain:{domain}</strong>: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.</li><li><strong>projectOwner:projectid</strong>: Owners of the given project. For example, \"projectOwner:my-example-project\"</li><li><strong>projectEditor:projectid</strong>: Editors of the given project. For example, \"projectEditor:my-example-project\"</li><li><p><strong>projectViewer:projectid</strong>: Viewers of the given project. For example, \"projectViewer:my-example-project\"</p></li><li><p><code>role</code> - (Required) The role that should be applied. Only one<br /><code>google_vertex_ai_featurestore_entitytype_iam_binding</code> can be used per role. Note that custom roles must be of the format<br /><code>[projects|organizations]/{parent-name}/roles/{role-name}</code>.</p></li><li><p><code>policy_data</code> - (Required only by <code>google_vertex_ai_featurestore_entitytype_iam_policy</code>) The policy data generated by<br />  a <code>google_iam_policy</code> data source.</p></li></ul>", "attributes-reference": "<h2 id=\"attributes-reference\">Attributes Reference</h2><p>In addition to the arguments listed above, the following computed attributes are<br />exported:</p><ul><li><code>etag</code> - (Computed) The etag of the IAM policy.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>For all import syntaxes, the \"resource in question\" can take any of the following forms:</p><ul><li>{{featurestore}}/entityTypes/{{name}}</li><li>{{name}}</li></ul><p>Any variables not passed in the import command will be taken from the provider configuration.</p><p>Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member.</p><p>IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.</p><p>$ terraform import google_vertex_ai_featurestore_entitytype_iam_member.editor \"{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com\"</p><p>IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.</p><p>$ terraform import google_vertex_ai_featurestore_entitytype_iam_binding.editor \"{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer\"</p><p>IAM policy imports use the identifier of the resource in question, e.g.</p><p>$ terraform import google_vertex_ai_featurestore_entitytype_iam_policy.editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}</p><p>-&gt; <strong>Custom Roles</strong>: If you're importing a IAM resource with a custom role, make sure to use the<br /> full name of the custom role, e.g. <code>[projects/my-project|organizations/my-org]/roles/my-custom-role</code>.</p>", "description": "<h2 id=\"google_vertex_ai_featurestore_entitytype_iam_policy\">google_vertex_ai_featurestore_entitytype_iam_policy</h2><p>data \"google_iam_policy\" \"admin\" {<br />  binding {<br />    role = \"roles/viewer\"<br />    members = [<br />      \"user:jane@example.com\",<br />    ]<br />  }<br />}</p><p>resource \"google_vertex_ai_featurestore_entitytype_iam_policy\" \"policy\" {<br />  featurestore = google_vertex_ai_featurestore_entitytype.entity.featurestore<br />  entitytype = google_vertex_ai_featurestore_entitytype.entity.name<br />  policy_data = data.google_iam_policy.admin.policy_data<br />}</p>"}