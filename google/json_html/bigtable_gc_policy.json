{"google-bigtable-gc-policy": "<h1 id=\"google_bigtable_gc_policy\">google_bigtable_gc_policy</h1><p>Creates a Google Cloud Bigtable GC Policy inside a family. For more information see<br /><a href=\"https://cloud.google.com/bigtable/\">the official documentation</a> and<br /><a href=\"https://cloud.google.com/bigtable/docs/go/reference\">API</a>.</p><p>-&gt; <strong>Warning</strong>: We don't recommend having multiple GC policies for the same column<br />family as it may result in unexpected behavior.</p><p>-&gt; <strong>Note</strong>: GC policies associated with a replicated table cannot be destroyed directly.<br />Destroying a GC policy is translated into never perform garbage collection, this is<br />considered relaxing from pure age-based or version-based GC policy, hence not allowed.<br />The workaround is unreplicating the instance first by updating the instance to have one<br />cluster.</p>", "example-usage": "<h2 id=\"example-usage\">Example Usage</h2><p><br />resource \"google_bigtable_instance\" \"instance\" {<br />  name = \"tf-instance\"<br />  cluster {<br />    cluster_id   = \"tf-instance-cluster\"<br />    num_nodes    = 3<br />    storage_type = \"HDD\"<br />  }<br />}</p><p>resource \"google_bigtable_table\" \"table\" {<br />  name          = \"tf-table\"<br />  instance_name = google_bigtable_instance.instance.name</p><p>column_family {<br />    family = \"name\"<br />  }<br />}</p><p>resource \"google_bigtable_gc_policy\" \"policy\" {<br />  instance_name = google_bigtable_instance.instance.name<br />  table         = google_bigtable_table.table.name<br />  column_family = \"name\"<br />  deletion_policy = \"ABANDON\"</p><p>gc_rules = &lt;&lt;EOF<br />  {<br />    \"rules\": [<br />      {<br />        \"max_age\": \"168h\"<br />      }<br />    ]<br />  }<br />  EOF<br />}<br /></p><p>Multiple conditions is also supported. <code>UNION</code> when any of its sub-policies apply (OR). <code>INTERSECTION</code> when all its sub-policies apply (AND)</p><p><br />resource \"google_bigtable_gc_policy\" \"policy\" {<br />  instance_name = google_bigtable_instance.instance.name<br />  table         = google_bigtable_table.table.name<br />  column_family = \"name\"<br />  deletion_policy = \"ABANDON\"</p><p>gc_rules = &lt;&lt;EOF<br />  {<br />    \"mode\": \"union\",<br />    \"rules\": [<br />      {<br />        \"max_age\": \"168h\"<br />      },<br />      {<br />        \"max_version\": 10<br />      }<br />    ]<br />  }<br />  EOF<br />}<br /></p><p>An example of more complex GC policy:<br /><br />resource \"google_bigtable_instance\" \"instance\" {<br />  name = \"instance_name\"</p><p>cluster {<br />    cluster_id = \"cid\"<br />    zone       = \"us-central1-b\"<br />  }</p><p>instance_type = \"DEVELOPMENT\"<br />  deletion_protection = false<br />}</p><p>resource \"google_bigtable_table\" \"table\" {<br />  name          = \"your-table\"<br />  instance_name = google_bigtable_instance.instance.id</p><p>column_family {<br />    family = \"cf1\"<br />  }<br />}</p><p>resource \"google_bigtable_gc_policy\" \"policy\" {<br />  instance_name = google_bigtable_instance.instance.id<br />  table         = google_bigtable_table.table.name<br />  column_family = \"cf1\"<br />  deletion_policy = \"ABANDON\"</p><p>gc_rules = &lt;&lt;EOF<br />  {<br />    \"mode\": \"union\",<br />    \"rules\": [<br />      {<br />        \"max_age\": \"10h\"<br />      },<br />      {<br />        \"mode\": \"intersection\",<br />        \"rules\": [<br />          {<br />            \"max_age\": \"2h\"<br />          },<br />          {<br />            \"max_version\": 2<br />          }<br />        ]<br />      }<br />    ]<br />  }<br />  EOF<br />}<br /><code>This is equivalent to running the following `cbt` command:</code><br />cbt setgcpolicy your-table cf1 \"(maxage=2d and maxversions=2) or maxage=10h\"<br /></p>", "argument-reference": "<h2 id=\"argument-reference\">Argument Reference</h2><p>The following arguments are supported:</p><ul><li><p><code>table</code> - (Required) The name of the table.</p></li><li><p><code>instance_name</code> - (Required) The name of the Bigtable instance.</p></li><li><p><code>column_family</code> - (Required) The name of the column family.</p></li><li><p><code>project</code> - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.</p></li><li><p><code>mode</code> - (Optional) If multiple policies are set, you should choose between <code>UNION</code> OR <code>INTERSECTION</code>.</p></li><li><p><code>max_age</code> - (Optional) GC policy that applies to all cells older than the given age.</p></li><li><p><code>max_version</code> - (Optional) GC policy that applies to all versions of a cell except for the most recent.</p></li><li><p><code>gc_rules</code> - (Optional) Serialized JSON object to represent a more complex GC policy. Conflicts with <code>mode</code>, <code>max_age</code> and <code>max_version</code>. Conflicts with <code>mode</code>, <code>max_age</code> and <code>max_version</code>.</p></li><li><p><code>deletion_policy</code> - (Optional) The deletion policy for the GC policy.<br />    Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.</p><p>Possible values are: <code>ABANDON</code>.</p></li></ul><hr /><p><code>max_age</code> supports the following arguments:</p><ul><li><p><code>days</code> - (Optional, Deprecated in favor of duration) Number of days before applying GC policy.</p></li><li><p><code>duration</code> - (Optional) Duration before applying GC policy (ex. \"8h\"). This is required when <code>days</code> isn't set</p></li></ul><hr /><p><code>max_version</code> supports the following arguments:</p><ul><li><code>number</code> - (Required) Number of version before applying the GC policy.</li></ul><hr /><p><code>gc_rules</code> include 2 fields:<br />- <code>mode</code>: optional, either <code>intersection</code> or <code>union</code>.<br />- <code>rules</code>: an array of GC policy rule, can be specified as JSON object: <code>{\"max_age\": \"16h\"}</code> or <code>{\"max_version\": 2}</code><br />- If <code>mode</code> is not specified, <code>rules</code> can only contains one GC policy. If <code>mode</code> is specified, <code>rules</code> must have at least 2 policies.</p>", "attributes-reference": "<h2 id=\"attributes-reference\">Attributes Reference</h2><p>Only the arguments listed above are exposed as attributes.</p>", "timeouts": "<h2 id=\"timeouts\">Timeouts</h2><p>This resource provides the following<br /><a href=\"https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts\">Timeouts</a> configuration options:</p><ul><li><code>create</code> - Default is 20 minutes.</li><li><code>delete</code> - Default is 20 minutes.</li></ul>", "import": "<h2 id=\"import\">Import</h2><p>This resource does not support import.</p>", "description": "<h1 id=\"google_bigtable_gc_policy\">google_bigtable_gc_policy</h1><p>Creates a Google Cloud Bigtable GC Policy inside a family. For more information see<br /><a href=\"https://cloud.google.com/bigtable/\">the official documentation</a> and<br /><a href=\"https://cloud.google.com/bigtable/docs/go/reference\">API</a>.</p><p>-&gt; <strong>Warning</strong>: We don't recommend having multiple GC policies for the same column<br />family as it may result in unexpected behavior.</p><p>-&gt; <strong>Note</strong>: GC policies associated with a replicated table cannot be destroyed directly.<br />Destroying a GC policy is translated into never perform garbage collection, this is<br />considered relaxing from pure age-based or version-based GC policy, hence not allowed.<br />The workaround is unreplicating the instance first by updating the instance to have one<br />cluster.</p>"}